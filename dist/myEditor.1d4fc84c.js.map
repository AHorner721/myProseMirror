{"version":3,"sources":["node_modules/orderedmap/index.es.js","../src/to_dom.js","../src/diff.js","../src/fragment.js","../src/comparedeep.js","../src/mark.js","../src/replace.js","../src/resolvedpos.js","../src/node.js","../src/content.js","../src/schema.js","../src/from_dom.js","../src/map.js","../src/transform.js","../src/step.js","../src/replace_step.js","../src/structure.js","../src/mark_step.js","../src/plugin.js","../src/selection.js","../src/transaction.js","../src/state.js","../src/index.js","../src/browser.js","../src/dom.js","../src/domcoords.js","../src/viewdesc.js","../src/capturekeys.js","../src/domchange.js","../src/clipboard.js","../src/domobserver.js","../src/input.js","../src/decoration.js","index.js"],"names":["orderedmap","OrderedMap","content","prototype","constructor","find","key","i","length","get","found","undefined","update","value","newKey","self","remove","slice","push","splice","addToStart","concat","addToEnd","addBefore","place","without","forEach","f","prepend","map","from","size","subtract","append","result","prop","let","const","p","prototypeAccessors","n","prototypeAccessors$1","super","type","loop","next","states","mark","text","this","rules","name","space","index","d","splitting","match","browser","pos","box","before","after","target","desc","search","j","offset","child","anchor","tr","sel","span","mySchema","Schema","nodes","doc","paragraph","toDOM","rootContent","document","querySelector","state","EditorState","create","view","EditorView"],"mappings":"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","file":"myEditor.1d4fc84c.js","sourceRoot":"..","sourcesContent":["// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNode(node, options))\n    })\n\n    return target\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  serializeNodeAndMarks(node, options = {}) {\n    let dom = this.serializeNode(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?string) → string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) → number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) → bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n\n  inlineContext(node) {\n    if (this.type) return this.type.inlineContent\n    if (this.content.length) return this.content[0].isInline\n    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        top.inlineContext(dom) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) → any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) → ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) → ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","import {NodeSelection} from \"prosemirror-state\"\n\nimport {scrollRectIntoView, posAtCoords, coordsAtPos, endOfTextblock, storeScrollPos,\n        resetScrollPos, focusPreventScroll} from \"./domcoords\"\nimport {docViewDesc} from \"./viewdesc\"\nimport {initInput, destroyInput, dispatchEvent, ensureListeners, clearComposition} from \"./input\"\nimport {selectionToDOM, anchorInRightPlace, syncNodeSelection} from \"./selection\"\nimport {Decoration, viewDecorations} from \"./decoration\"\nimport browser from \"./browser\"\n\nexport {Decoration, DecorationSet} from \"./decoration\"\n\n// Exported for testing\nexport {serializeForClipboard as __serializeForClipboard, parseFromClipboard as __parseFromClipboard} from \"./clipboard\"\nexport {endComposition as __endComposition} from \"./input\"\n\n// ::- An editor view manages the DOM structure that represents an\n// editable document. Its state and behavior are determined by its\n// [props](#view.DirectEditorProps).\nexport class EditorView {\n  // :: (?union<dom.Node, (dom.Node), {mount: dom.Node}>, DirectEditorProps)\n  // Create a view. `place` may be a DOM node that the editor should\n  // be appended to, a function that will place it into the document,\n  // or an object whose `mount` property holds the node to use as the\n  // document container. If it is `null`, the editor will not be added\n  // to the document.\n  constructor(place, props) {\n    this._props = props\n    // :: EditorState\n    // The view's current [state](#state.EditorState).\n    this.state = props.state\n\n    this.dispatch = this.dispatch.bind(this)\n\n    this._root = null\n    this.focused = false\n    // Kludge used to work around a Chrome bug\n    this.trackWrites = null\n\n    // :: dom.Element\n    // An editable DOM node containing the document. (You probably\n    // should not directly interfere with its content.)\n    this.dom = (place && place.mount) || document.createElement(\"div\")\n    if (place) {\n      if (place.appendChild) place.appendChild(this.dom)\n      else if (place.apply) place(this.dom)\n      else if (place.mount) this.mounted = true\n    }\n\n    // :: bool\n    // Indicates whether the editor is currently [editable](#view.EditorProps.editable).\n    this.editable = getEditable(this)\n    this.markCursor = null\n    this.cursorWrapper = null\n    updateCursorWrapper(this)\n    this.nodeViews = buildNodeViews(this)\n    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this)\n\n    this.lastSelectedViewDesc = null\n    // :: ?{slice: Slice, move: bool}\n    // When editor content is being dragged, this object contains\n    // information about the dragged slice and whether it is being\n    // copied or moved. At any other time, it is null.\n    this.dragging = null\n\n    initInput(this)\n\n    this.pluginViews = []\n    this.updatePluginViews()\n  }\n\n  // composing:: boolean\n  // Holds `true` when a\n  // [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)\n  // is active.\n\n  // :: DirectEditorProps\n  // The view's current [props](#view.EditorProps).\n  get props() {\n    if (this._props.state != this.state) {\n      let prev = this._props\n      this._props = {}\n      for (let name in prev) this._props[name] = prev[name]\n      this._props.state = this.state\n    }\n    return this._props\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view's props. Will immediately cause an update to\n  // the DOM.\n  update(props) {\n    if (props.handleDOMEvents != this._props.handleDOMEvents) ensureListeners(this)\n    this._props = props\n    this.updateStateInner(props.state, true)\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view by updating existing props object with the object\n  // given as argument. Equivalent to `view.update(Object.assign({},\n  // view.props, props))`.\n  setProps(props) {\n    let updated = {}\n    for (let name in this._props) updated[name] = this._props[name]\n    updated.state = this.state\n    for (let name in props) updated[name] = props[name]\n    this.update(updated)\n  }\n\n  // :: (EditorState)\n  // Update the editor's `state` prop, without touching any of the\n  // other props.\n  updateState(state) {\n    this.updateStateInner(state, this.state.plugins != state.plugins)\n  }\n\n  updateStateInner(state, reconfigured) {\n    let prev = this.state, redraw = false, updateSel = false\n    // When stored marks are added, stop composition, so that they can\n    // be displayed.\n    if (state.storedMarks && this.composing) {\n      clearComposition(this)\n      updateSel = true\n    }\n    this.state = state\n    if (reconfigured) {\n      let nodeViews = buildNodeViews(this)\n      if (changedNodeViews(nodeViews, this.nodeViews)) {\n        this.nodeViews = nodeViews\n        redraw = true\n      }\n      ensureListeners(this)\n    }\n\n    this.editable = getEditable(this)\n    updateCursorWrapper(this)\n    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this)\n\n    let scroll = reconfigured ? \"reset\"\n        : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\"\n    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco)\n    if (updateDoc || !state.selection.eq(prev.selection)) updateSel = true\n    let oldScrollPos = scroll == \"preserve\" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this)\n\n    if (updateSel) {\n      this.domObserver.stop()\n      // Work around an issue in Chrome, IE, and Edge where changing\n      // the DOM around an active selection puts it into a broken\n      // state where the thing the user sees differs from the\n      // selection reported by the Selection object (#710, #973,\n      // #1011, #1013, #1035).\n      let forceSelUpdate = updateDoc && (browser.ie || browser.chrome) && !this.composing &&\n          !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection)\n      if (updateDoc) {\n        // If the node that the selection points into is written to,\n        // Chrome sometimes starts misreporting the selection, so this\n        // tracks that and forces a selection reset when our update\n        // did write to the node.\n        let chromeKludge = browser.chrome ? (this.trackWrites = this.root.getSelection().focusNode) : null\n        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n          this.docView.updateOuterDeco([])\n          this.docView.destroy()\n          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this)\n        }\n        if (chromeKludge && !this.trackWrites) forceSelUpdate = true\n      }\n      // Work around for an issue where an update arriving right between\n      // a DOM selection change and the \"selectionchange\" event for it\n      // can cause a spurious DOM selection update, disrupting mouse\n      // drag selection.\n      if (forceSelUpdate ||\n          !(this.mouseDown && this.domObserver.currentSelection.eq(this.root.getSelection()) && anchorInRightPlace(this))) {\n        selectionToDOM(this, forceSelUpdate)\n      } else {\n        syncNodeSelection(this, state.selection)\n        this.domObserver.setCurSelection()\n      }\n      this.domObserver.start()\n    }\n\n    this.updatePluginViews(prev)\n\n    if (scroll == \"reset\") {\n      this.dom.scrollTop = 0\n    } else if (scroll == \"to selection\") {\n      let startDOM = this.root.getSelection().focusNode\n      if (this.someProp(\"handleScrollToSelection\", f => f(this)))\n        {} // Handled\n      else if (state.selection instanceof NodeSelection)\n        scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM)\n      else\n        scrollRectIntoView(this, this.coordsAtPos(state.selection.head, 1), startDOM)\n    } else if (oldScrollPos) {\n      resetScrollPos(oldScrollPos)\n    }\n  }\n\n  destroyPluginViews() {\n    let view\n    while (view = this.pluginViews.pop()) if (view.destroy) view.destroy()\n  }\n\n  updatePluginViews(prevState) {\n    if (!prevState || prevState.plugins != this.state.plugins) {\n      this.destroyPluginViews()\n      for (let i = 0; i < this.state.plugins.length; i++) {\n        let plugin = this.state.plugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n    } else {\n      for (let i = 0; i < this.pluginViews.length; i++) {\n        let pluginView = this.pluginViews[i]\n        if (pluginView.update) pluginView.update(this, prevState)\n      }\n    }\n  }\n\n  // :: (string, ?(prop: *) → *) → *\n  // Goes over the values of a prop, first those provided directly,\n  // then those from plugins (in order), and calls `f` every time a\n  // non-undefined value is found. When `f` returns a truthy value,\n  // that is immediately returned. When `f` isn't provided, it is\n  // treated as the identity function (the prop value is returned\n  // directly).\n  someProp(propName, f) {\n    let prop = this._props && this._props[propName], value\n    if (prop != null && (value = f ? f(prop) : prop)) return value\n    let plugins = this.state.plugins\n    if (plugins) for (let i = 0; i < plugins.length; i++) {\n      let prop = plugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n  }\n\n  // :: () → bool\n  // Query whether the view has focus.\n  hasFocus() {\n    return this.root.activeElement == this.dom\n  }\n\n  // :: ()\n  // Focus the editor.\n  focus() {\n    this.domObserver.stop()\n    if (this.editable) focusPreventScroll(this.dom)\n    selectionToDOM(this)\n    this.domObserver.start()\n  }\n\n  // :: union<dom.Document, dom.DocumentFragment>\n  // Get the document root in which the editor exists. This will\n  // usually be the top-level `document`, but might be a [shadow\n  // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n  // root if the editor is inside one.\n  get root() {\n    let cached = this._root\n    if (cached == null) for (let search = this.dom.parentNode; search; search = search.parentNode) {\n      if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {\n        if (!search.getSelection) Object.getPrototypeOf(search).getSelection = () => document.getSelection()\n        return this._root = search\n      }\n    }\n    return cached || document\n  }\n\n  // :: ({left: number, top: number}) → ?{pos: number, inside: number}\n  // Given a pair of viewport coordinates, return the document\n  // position that corresponds to them. May return null if the given\n  // coordinates aren't inside of the editor. When an object is\n  // returned, its `pos` property is the position nearest to the\n  // coordinates, and its `inside` property holds the position of the\n  // inner node that the position falls inside of, or -1 if it is at\n  // the top level, not in any node.\n  posAtCoords(coords) {\n    return posAtCoords(this, coords)\n  }\n\n  // :: (number, number) → {left: number, right: number, top: number, bottom: number}\n  // Returns the viewport rectangle at a given document position.\n  // `left` and `right` will be the same number, as this returns a\n  // flat cursor-ish rectangle. If the position is between two things\n  // that aren't directly adjacent, `side` determines which element is\n  // used. When < 0, the element before the position is used,\n  // otherwise the element after.\n  coordsAtPos(pos, side = 1) {\n    return coordsAtPos(this, pos, side)\n  }\n\n  // :: (number, number) → {node: dom.Node, offset: number}\n  // Find the DOM position that corresponds to the given document\n  // position. When `side` is negative, find the position as close as\n  // possible to the content before the position. When positive,\n  // prefer positions close to the content after the position. When\n  // zero, prefer as shallow a position as possible.\n  //\n  // Note that you should **not** mutate the editor's internal DOM,\n  // only inspect it (and even that is usually not necessary).\n  domAtPos(pos, side = 0) {\n    return this.docView.domFromPos(pos, side)\n  }\n\n  // :: (number) → ?dom.Node\n  // Find the DOM node that represents the document node after the\n  // given position. May return `null` when the position doesn't point\n  // in front of a node or if the node is inside an opaque node view.\n  //\n  // This is intended to be able to call things like\n  // `getBoundingClientRect` on that DOM node. Do **not** mutate the\n  // editor DOM directly, or add styling this way, since that will be\n  // immediately overriden by the editor as it redraws the node.\n  nodeDOM(pos) {\n    let desc = this.docView.descAt(pos)\n    return desc ? desc.nodeDOM : null\n  }\n\n  // :: (dom.Node, number, ?number) → number\n  // Find the document position that corresponds to a given DOM\n  // position. (Whenever possible, it is preferable to inspect the\n  // document structure directly, rather than poking around in the\n  // DOM, but sometimes—for example when interpreting an event\n  // target—you don't have a choice.)\n  //\n  // The `bias` parameter can be used to influence which side of a DOM\n  // node to use when the position is inside a leaf node.\n  posAtDOM(node, offset, bias = -1) {\n    let pos = this.docView.posFromDOM(node, offset, bias)\n    if (pos == null) throw new RangeError(\"DOM position not inside the editor\")\n    return pos\n  }\n\n  // :: (union<\"up\", \"down\", \"left\", \"right\", \"forward\", \"backward\">, ?EditorState) → bool\n  // Find out whether the selection is at the end of a textblock when\n  // moving in a given direction. When, for example, given `\"left\"`,\n  // it will return true if moving left from the current cursor\n  // position would leave that position's parent textblock. Will apply\n  // to the view's current state by default, but it is possible to\n  // pass a different state.\n  endOfTextblock(dir, state) {\n    return endOfTextblock(this, state || this.state, dir)\n  }\n\n  // :: ()\n  // Removes the editor from the DOM and destroys all [node\n  // views](#view.NodeView).\n  destroy() {\n    if (!this.docView) return\n    destroyInput(this)\n    this.destroyPluginViews()\n    if (this.mounted) {\n      this.docView.update(this.state.doc, [], viewDecorations(this), this)\n      this.dom.textContent = \"\"\n    } else if (this.dom.parentNode) {\n      this.dom.parentNode.removeChild(this.dom)\n    }\n    this.docView.destroy()\n    this.docView = null\n  }\n\n  // Used for testing.\n  dispatchEvent(event) {\n    return dispatchEvent(this, event)\n  }\n\n  // :: (Transaction)\n  // Dispatch a transaction. Will call\n  // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n  // when given, and otherwise defaults to applying the transaction to\n  // the current state and calling\n  // [`updateState`](#view.EditorView.updateState) with the result.\n  // This method is bound to the view instance, so that it can be\n  // easily passed around.\n  dispatch(tr) {\n    let dispatchTransaction = this._props.dispatchTransaction\n    if (dispatchTransaction) dispatchTransaction.call(this, tr)\n    else this.updateState(this.state.apply(tr))\n  }\n}\n\nfunction computeDocDeco(view) {\n  let attrs = Object.create(null)\n  attrs.class = \"ProseMirror\"\n  attrs.contenteditable = String(view.editable)\n\n  view.someProp(\"attributes\", value => {\n    if (typeof value == \"function\") value = value(view.state)\n    if (value) for (let attr in value) {\n      if (attr == \"class\")\n        attrs.class += \" \" + value[attr]\n      else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\")\n        attrs[attr] = String(value[attr])\n    }\n  })\n\n  return [Decoration.node(0, view.state.doc.content.size, attrs)]\n}\n\nfunction updateCursorWrapper(view) {\n  if (view.markCursor) {\n    let dom = document.createElement(\"img\")\n    dom.setAttribute(\"mark-placeholder\", \"true\")\n    view.cursorWrapper = {dom, deco: Decoration.widget(view.state.selection.head, dom, {raw: true, marks: view.markCursor})}\n  } else {\n    view.cursorWrapper = null\n  }\n}\n\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", value => value(view.state) === false)\n}\n\nfunction selectionContextChanged(sel1, sel2) {\n  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head))\n  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth)\n}\n\nfunction buildNodeViews(view) {\n  let result = {}\n  view.someProp(\"nodeViews\", obj => {\n    for (let prop in obj) if (!Object.prototype.hasOwnProperty.call(result, prop))\n      result[prop] = obj[prop]\n  })\n  return result\n}\n\nfunction changedNodeViews(a, b) {\n  let nA = 0, nB = 0\n  for (let prop in a) {\n    if (a[prop] != b[prop]) return true\n    nA++\n  }\n  for (let _ in b) nB++\n  return nA != nB\n}\n\n// EditorProps:: interface\n//\n// Props are configuration values that can be passed to an editor view\n// or included in a plugin. This interface lists the supported props.\n//\n// The various event-handling functions may all return `true` to\n// indicate that they handled the given event. The view will then take\n// care to call `preventDefault` on the event, except with\n// `handleDOMEvents`, where the handler itself is responsible for that.\n//\n// How a prop is resolved depends on the prop. Handler functions are\n// called one at a time, starting with the base props and then\n// searching through the plugins (in order of appearance) until one of\n// them returns true. For some props, the first plugin that yields a\n// value gets precedence.\n//\n//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>\n//   Can be an object mapping DOM event type names to functions that\n//   handle them. Such functions will be called before any handling\n//   ProseMirror does of events fired on the editable DOM element.\n//   Contrary to the other event handling props, when returning true\n//   from such a function, you are responsible for calling\n//   `preventDefault` yourself (or not, if you want to allow the\n//   default behavior).\n//\n//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Called when the editor receives a `keydown` event.\n//\n//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Handler for `keypress` events.\n//\n//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool\n//   Whenever the user directly input text, this handler is called\n//   before the input is applied. If it returns `true`, the default\n//   behavior of actually inserting the text is suppressed.\n//\n//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a click, from the inside out. The\n//   `direct` flag will be true for the inner node.\n//\n//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is clicked, after `handleClickOn` handlers\n//   have been called.\n//\n//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a double click.\n//\n//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is double-clicked, after `handleDoubleClickOn`.\n//\n//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a triple click.\n//\n//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is triple-clicked, after `handleTripleClickOn`.\n//\n//   handlePaste:: ?(view: EditorView, event: dom.ClipboardEvent, slice: Slice) → bool\n//   Can be used to override the behavior of pasting. `slice` is the\n//   pasted content parsed by the editor, but you can directly access\n//   the event to get at the raw content.\n//\n//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool\n//   Called when something is dropped on the editor. `moved` will be\n//   true if this drop moves from the current selection (which should\n//   thus be deleted).\n//\n//   handleScrollToSelection:: ?(view: EditorView) → bool\n//   Called when the view, after updating its state, tries to scroll\n//   the selection into view. A handler function may return false to\n//   indicate that it did not handle the scrolling and further\n//   handlers or the default behavior should be tried.\n//\n//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection\n//   Can be used to override the way a selection is created when\n//   reading a DOM selection between the given anchor and head.\n//\n//   domParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading editor changes\n//   from the DOM. Defaults to calling\n//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n//   editor's schema.\n//\n//   transformPastedHTML:: ?(html: string) → string\n//   Can be used to transform pasted HTML text, _before_ it is parsed,\n//   for example to clean it up.\n//\n//   clipboardParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading content from\n//   the clipboard. When not given, the value of the\n//   [`domParser`](#view.EditorProps.domParser) prop is used.\n//\n//   transformPastedText:: ?(text: string, plain: bool) → string\n//   Transform pasted plain text. The `plain` flag will be true when\n//   the text is pasted as plain text.\n//\n//   clipboardTextParser:: ?(text: string, $context: ResolvedPos, plain: bool) → Slice\n//   A function to parse text from the clipboard into a document\n//   slice. Called after\n//   [`transformPastedText`](#view.EditorProps.transformPastedText).\n//   The default behavior is to split the text into lines, wrap them\n//   in `<p>` tags, and call\n//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n//   The `plain` flag will be true when the text is pasted as plain text.\n//\n//   transformPasted:: ?(Slice) → Slice\n//   Can be used to transform pasted content before it is applied to\n//   the document.\n//\n//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration], innerDecorations: DecorationSource) → NodeView>\n//   Allows you to pass custom rendering and behavior logic for nodes\n//   and marks. Should map node and mark names to constructor\n//   functions that produce a [`NodeView`](#view.NodeView) object\n//   implementing the node's display behavior. For nodes, the third\n//   argument `getPos` is a function that can be called to get the\n//   node's current position, which can be useful when creating\n//   transactions to update it. For marks, the third argument is a\n//   boolean that indicates whether the mark's content is inline.\n//\n//   `decorations` is an array of node or inline decorations that are\n//   active around the node. They are automatically drawn in the\n//   normal way, and you will usually just want to ignore this, but\n//   they can also be used as a way to provide context information to\n//   the node view without adding it to the document itself.\n//\n//   `innerDecorations` holds the decorations for the node's content.\n//   You can safely ignore this if your view has no content or a\n//   `contentDOM` property, since the editor will draw the decorations\n//   on the content. But if you, for example, want to create a nested\n//   editor with the content, it may make sense to provide it with the\n//   inner decorations.\n//\n//   clipboardSerializer:: ?DOMSerializer\n//   The DOM serializer to use when putting content onto the\n//   clipboard. If not given, the result of\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n//   will be used.\n//\n//   clipboardTextSerializer:: ?(Slice) → string\n//   A function that will be called to get the text for the current\n//   selection when copying text to the clipboard. By default, the\n//   editor will use [`textBetween`](#model.Node.textBetween) on the\n//   selected range.\n//\n//   decorations:: ?(state: EditorState) → ?DecorationSource\n//   A set of [document decorations](#view.Decoration) to show in the\n//   view.\n//\n//   editable:: ?(state: EditorState) → bool\n//   When this returns false, the content of the view is not directly\n//   editable.\n//\n//   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>\n//   Control the DOM attributes of the editable element. May be either\n//   an object or a function going from an editor state to an object.\n//   By default, the element will get a class `\"ProseMirror\"`, and\n//   will have its `contentEditable` attribute determined by the\n//   [`editable` prop](#view.EditorProps.editable). Additional classes\n//   provided here will be added to the class. For other attributes,\n//   the value provided first (as in\n//   [`someProp`](#view.EditorView.someProp)) will be used.\n//\n//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the distance (in pixels) between the cursor and the\n//   end of the visible viewport at which point, when scrolling the\n//   cursor into view, scrolling takes place. Defaults to 0.\n//\n//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the extra space (in pixels) that is left above or\n//   below the cursor when it is scrolled into view. Defaults to 5.\n\n// DirectEditorProps:: interface extends EditorProps\n//\n// The props object given directly to the editor view supports two\n// fields that can't be used in plugins:\n//\n//   state:: EditorState\n//   The current state of the editor.\n//\n//   dispatchTransaction:: ?(tr: Transaction)\n//   The callback over which to send transactions (state updates)\n//   produced by the view. If you specify this, you probably want to\n//   make sure this ends up calling the view's\n//   [`updateState`](#view.EditorView.updateState) method with a new\n//   state that has the transaction\n//   [applied](#state.EditorState.apply). The callback will be bound to have\n//   the view instance as its `this` binding.\n","const result = {}\nexport default result\n\nif (typeof navigator != \"undefined\" && typeof document != \"undefined\") {\n  const ie_edge = /Edge\\/(\\d+)/.exec(navigator.userAgent)\n  const ie_upto10 = /MSIE \\d/.test(navigator.userAgent)\n  const ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n  result.mac = /Mac/.test(navigator.platform)\n  let ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge)\n  result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null\n  result.gecko = !ie && /gecko\\/(\\d+)/i.test(navigator.userAgent)\n  result.gecko_version = result.gecko && +(/Firefox\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n  let chrome = !ie && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\n  result.chrome = !!chrome\n  result.chrome_version = chrome && +chrome[1]\n  // Is true for both iOS and iPadOS for convenience\n  result.safari = !ie && /Apple Computer/.test(navigator.vendor)\n  result.ios = result.safari && (/Mobile\\/\\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2)\n  result.android = /Android \\d/.test(navigator.userAgent)\n  result.webkit = \"webkitFontSmoothing\" in document.documentElement.style\n  result.webkit_version = result.webkit && +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n}\n","import browser from \"./browser\"\n\nexport const domIndex = function(node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling\n    if (!node) return index\n  }\n}\n\nexport const parentNode = function(node) {\n  let parent = node.assignedSlot || node.parentNode\n  return parent && parent.nodeType == 11 ? parent.host : parent\n}\n\nlet reusedRange = null\n\n// Note that this will always return the same range, because DOM range\n// objects are every expensive, and keep slowing down subsequent DOM\n// updates, for some reason.\nexport const textRange = function(node, from, to) {\n  let range = reusedRange || (reusedRange = document.createRange())\n  range.setEnd(node, to == null ? node.nodeValue.length : to)\n  range.setStart(node, from || 0)\n  return range\n}\n\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nexport const isEquivalentPosition = function(node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||\n                        scanFor(node, off, targetNode, targetOff, 1))\n}\n\nconst atomElements = /^(img|br|input|textarea|hr)$/i\n\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) return true\n    if (off == (dir < 0 ? 0 : nodeSize(node))) {\n      let parent = node.parentNode\n      if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\")\n        return false\n      off = domIndex(node) + (dir < 0 ? 0 : 1)\n      node = parent\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)]\n      if (node.contentEditable == \"false\") return false\n      off = dir < 0 ? nodeSize(node) : 0\n    } else {\n      return false\n    }\n  }\n}\n\nexport function nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nexport function isOnEdge(node, offset, parent) {\n  for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {\n    if (node == parent) return true\n    let index = domIndex(node)\n    node = node.parentNode\n    if (!node) return false\n    atStart = atStart && index == 0\n    atEnd = atEnd && index == nodeSize(node)\n  }\n}\n\nfunction hasBlockDesc(dom) {\n  let desc\n  for (let cur = dom; cur; cur = cur.parentNode) if (desc = cur.pmViewDesc) break\n  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom)\n}\n\n// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\nexport const selectionCollapsed = function(domSel) {\n  let collapsed = domSel.isCollapsed\n  if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)\n    collapsed = false\n  return collapsed\n}\n\nexport function keyEvent(keyCode, key) {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"keydown\", true, true)\n  event.keyCode = keyCode\n  event.key = event.code = key\n  return event\n}\n","import {nodeSize, textRange, parentNode} from \"./dom\"\nimport browser from \"./browser\"\n\nfunction windowRect(doc) {\n  return {left: 0, right: doc.documentElement.clientWidth,\n          top: 0, bottom: doc.documentElement.clientHeight}\n}\n\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side]\n}\n\nfunction clientRect(node) {\n  let rect = node.getBoundingClientRect()\n  // Adjust for elements with style \"transform: scale()\"\n  let scaleX = (rect.width / node.offsetWidth) || 1\n  let scaleY = (rect.height / node.offsetHeight) || 1\n  // Make sure scrollbar width isn't included in the rectangle\n  return {left: rect.left, right: rect.left + node.clientWidth * scaleX,\n          top: rect.top, bottom: rect.top + node.clientHeight * scaleY}\n}\n\nexport function scrollRectIntoView(view, rect, startDOM) {\n  let scrollThreshold = view.someProp(\"scrollThreshold\") || 0, scrollMargin = view.someProp(\"scrollMargin\") || 5\n  let doc = view.dom.ownerDocument\n  for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {\n    if (!parent) break\n    if (parent.nodeType != 1) continue\n    let atTop = parent == doc.body || parent.nodeType != 1\n    let bounding = atTop ? windowRect(doc) : clientRect(parent)\n    let moveX = 0, moveY = 0\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\"))\n      moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"))\n    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\"))\n      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\")\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\"))\n      moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"))\n    else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\"))\n      moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\")\n    if (moveX || moveY) {\n      if (atTop) {\n        doc.defaultView.scrollBy(moveX, moveY)\n      } else {\n        let startX = parent.scrollLeft, startY = parent.scrollTop\n        if (moveY) parent.scrollTop += moveY\n        if (moveX) parent.scrollLeft += moveX\n        let dX = parent.scrollLeft - startX, dY = parent.scrollTop - startY\n        rect = {left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY}\n      }\n    }\n    if (atTop) break\n  }\n}\n\n// Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\nexport function storeScrollPos(view) {\n  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top)\n  let refDOM, refTop\n  for (let x = (rect.left + rect.right) / 2, y = startY + 1;\n       y < Math.min(innerHeight, rect.bottom); y += 5) {\n    let dom = view.root.elementFromPoint(x, y)\n    if (dom == view.dom || !view.dom.contains(dom)) continue\n    let localRect = dom.getBoundingClientRect()\n    if (localRect.top >= startY - 20) {\n      refDOM = dom\n      refTop = localRect.top\n      break\n    }\n  }\n  return {refDOM, refTop, stack: scrollStack(view.dom)}\n}\n\nfunction scrollStack(dom) {\n  let stack = [], doc = dom.ownerDocument\n  for (; dom; dom = parentNode(dom)) {\n    stack.push({dom, top: dom.scrollTop, left: dom.scrollLeft})\n    if (dom == doc) break\n  }\n  return stack\n}\n\n// Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\nexport function resetScrollPos({refDOM, refTop, stack}) {\n  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0\n  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop)\n}\n\nfunction restoreScrollStack(stack, dTop) {\n  for (let i = 0; i < stack.length; i++) {\n    let {dom, top, left} = stack[i]\n    if (dom.scrollTop != top + dTop) dom.scrollTop = top + dTop\n    if (dom.scrollLeft != left) dom.scrollLeft = left\n  }\n}\n\nlet preventScrollSupported = null\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nexport function focusPreventScroll(dom) {\n  if (dom.setActive) return dom.setActive() // in IE\n  if (preventScrollSupported) return dom.focus(preventScrollSupported)\n\n  let stored = scrollStack(dom)\n  dom.focus(preventScrollSupported == null ? {\n    get preventScroll() {\n      preventScrollSupported = {preventScroll: true}\n      return true\n    }\n  } : undefined)\n  if (!preventScrollSupported) {\n    preventScrollSupported = false\n    restoreScrollStack(stored, 0)\n  }\n}\n\nfunction findOffsetInNode(node, coords) {\n  let closest, dxClosest = 2e8, coordsClosest, offset = 0\n  let rowBot = coords.top, rowTop = coords.top\n  for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    let rects\n    if (child.nodeType == 1) rects = child.getClientRects()\n    else if (child.nodeType == 3) rects = textRange(child).getClientRects()\n    else continue\n\n    for (let i = 0; i < rects.length; i++) {\n      let rect = rects[i]\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot)\n        rowTop = Math.min(rect.top, rowTop)\n        let dx = rect.left > coords.left ? rect.left - coords.left\n            : rect.right < coords.left ? coords.left - rect.right : 0\n        if (dx < dxClosest) {\n          closest = child\n          dxClosest = dx\n          coordsClosest = dx && closest.nodeType == 3 ? {left: rect.right < coords.left ? rect.right : rect.left, top: coords.top} : coords\n          if (child.nodeType == 1 && dx)\n            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n          continue\n        }\n      }\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||\n                       coords.left >= rect.left && coords.top >= rect.bottom))\n        offset = childIndex + 1\n    }\n  }\n  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest)\n  if (!closest || (dxClosest && closest.nodeType == 1)) return {node, offset}\n  return findOffsetInNode(closest, coordsClosest)\n}\n\nfunction findOffsetInText(node, coords) {\n  let len = node.nodeValue.length\n  let range = document.createRange()\n  for (let i = 0; i < len; i++) {\n    range.setEnd(node, i + 1)\n    range.setStart(node, i)\n    let rect = singleRect(range, 1)\n    if (rect.top == rect.bottom) continue\n    if (inRect(coords, rect))\n      return {node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)}\n  }\n  return {node, offset: 0}\n}\n\nfunction inRect(coords, rect) {\n  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1&&\n    coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1\n}\n\nfunction targetKludge(dom, coords) {\n  let parent = dom.parentNode\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)\n    return parent\n  return dom\n}\n\nfunction posFromElement(view, elt, coords) {\n  let {node, offset} = findOffsetInNode(elt, coords), bias = -1\n  if (node.nodeType == 1 && !node.firstChild) {\n    let rect = node.getBoundingClientRect()\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1\n  }\n  return view.docView.posFromDOM(node, offset, bias)\n}\n\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  let outside = -1\n  for (let cur = node;;) {\n    if (cur == view.dom) break\n    let desc = view.docView.nearestDesc(cur, true)\n    if (!desc) return null\n    if (desc.node.isBlock && desc.parent) {\n      let rect = desc.dom.getBoundingClientRect()\n      if (rect.left > coords.left || rect.top > coords.top) outside = desc.posBefore\n      else if (rect.right < coords.left || rect.bottom < coords.top) outside = desc.posAfter\n      else break\n    }\n    cur = desc.dom.parentNode\n  }\n  return outside > -1 ? outside : view.docView.posFromDOM(node, offset)\n}\n\nfunction elementFromPoint(element, coords, box) {\n  let len = element.childNodes.length\n  if (len && box.top < box.bottom) {\n    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {\n      let child = element.childNodes[i]\n      if (child.nodeType == 1) {\n        let rects = child.getClientRects()\n        for (let j = 0; j < rects.length; j++) {\n          let rect = rects[j]\n          if (inRect(coords, rect)) return elementFromPoint(child, coords, rect)\n        }\n      }\n      if ((i = (i + 1) % len) == startI) break\n    }\n  }\n  return element\n}\n\n// Given an x,y position on the editor, get the position in the document.\nexport function posAtCoords(view, coords) {\n  let root = view.root, node, offset\n  if (root.caretPositionFromPoint) {\n    try { // Firefox throws for this call in hard-to-predict circumstances (#994)\n      let pos = root.caretPositionFromPoint(coords.left, coords.top)\n      if (pos) ({offsetNode: node, offset} = pos)\n    } catch (_) {}\n  }\n  if (!node && root.caretRangeFromPoint) {\n    let range = root.caretRangeFromPoint(coords.left, coords.top)\n    if (range) ({startContainer: node, startOffset: offset} = range)\n  }\n\n  let elt = root.elementFromPoint(coords.left, coords.top + 1), pos\n  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {\n    let box = view.dom.getBoundingClientRect()\n    if (!inRect(coords, box)) return null\n    elt = elementFromPoint(view.dom, coords, box)\n    if (!elt) return null\n  }\n  // Safari's caretRangeFromPoint returns nonsense when on a draggable element\n  if (browser.safari) {\n    for (let p = elt; node && p; p = parentNode(p))\n      if (p.draggable) node = offset = null\n  }\n  elt = targetKludge(elt, coords)\n  if (node) {\n    if (browser.gecko && node.nodeType == 1) {\n      // Firefox will sometimes return offsets into <input> nodes, which\n      // have no actual children, from caretPositionFromPoint (#953)\n      offset = Math.min(offset, node.childNodes.length)\n      // It'll also move the returned position before image nodes,\n      // even if those are behind it.\n      if (offset < node.childNodes.length) {\n        let next = node.childNodes[offset], box\n        if (next.nodeName == \"IMG\" && (box = next.getBoundingClientRect()).right <= coords.left &&\n            box.bottom > coords.top)\n          offset++\n      }\n    }\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&\n        coords.top > node.lastChild.getBoundingClientRect().bottom)\n      pos = view.state.doc.content.size\n    // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately placed\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\")\n      pos = posFromCaret(view, node, offset, coords)\n  }\n  if (pos == null) pos = posFromElement(view, elt, coords)\n\n  let desc = view.docView.nearestDesc(elt, true)\n  return {pos, inside: desc ? desc.posAtStart - desc.border : -1}\n}\n\nfunction singleRect(object, bias) {\n  let rects = object.getClientRects()\n  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1]\n}\n\nconst BIDI = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/\n\n// : (EditorView, number, number) → {left: number, top: number, right: number, bottom: number}\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\nexport function coordsAtPos(view, pos, side) {\n  let {node, offset} = view.docView.domFromPos(pos, side < 0 ? -1 : 1)\n\n  let supportEmptyRange = browser.webkit || browser.gecko\n  if (node.nodeType == 3) {\n    // These browsers support querying empty text ranges. Prefer that in\n    // bidi context or when at the end of a node.\n    if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {\n      let rect = singleRect(textRange(node, offset, offset), side)\n      // Firefox returns bad results (the position before the space)\n      // when querying a position directly after line-broken\n      // whitespace. Detect this situation and and kludge around it\n      if (browser.gecko && offset && /\\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {\n        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1)\n        if (rectBefore.top == rect.top) {\n          let rectAfter = singleRect(textRange(node, offset, offset + 1), -1)\n          if (rectAfter.top != rect.top)\n            return flattenV(rectAfter, rectAfter.left < rectBefore.left)\n        }\n      }\n      return rect\n    } else {\n      let from = offset, to = offset, takeSide = side < 0 ? 1 : -1\n      if (side < 0 && !offset) { to++; takeSide = -1 }\n      else if (side >= 0 && offset == node.nodeValue.length) { from--; takeSide = 1 }\n      else if (side < 0) { from-- }\n      else { to ++ }\n      return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0)\n    }\n  }\n\n  // Return a horizontal line in block context\n  if (!view.state.doc.resolve(pos).parent.inlineContent) {\n    if (offset && (side < 0 || offset == nodeSize(node))) {\n      let before = node.childNodes[offset - 1]\n      if (before.nodeType == 1) return flattenH(before.getBoundingClientRect(), false)\n    }\n    if (offset < nodeSize(node)) {\n      let after = node.childNodes[offset]\n      if (after.nodeType == 1) return flattenH(after.getBoundingClientRect(), true)\n    }\n    return flattenH(node.getBoundingClientRect(), side >= 0)\n  }\n\n  // Inline, not in text node (this is not Bidi-safe)\n  if (offset && (side < 0 || offset == nodeSize(node))) {\n    let before = node.childNodes[offset - 1]\n    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))\n        // BR nodes tend to only return the rectangle before them.\n        // Only use them if they are the last element in their parent\n        : before.nodeType == 1 && (before.nodeName != \"BR\" || !before.nextSibling) ? before : null\n    if (target) return flattenV(singleRect(target, 1), false)\n  }\n  if (offset < nodeSize(node)) {\n    let after = node.childNodes[offset]\n    let target = after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))\n        : after.nodeType == 1 ? after : null\n    if (target) return flattenV(singleRect(target, -1), true)\n  }\n  // All else failed, just try to get a rectangle for the target node\n  return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0)\n}\n\nfunction flattenV(rect, left) {\n  if (rect.width == 0) return rect\n  let x = left ? rect.left : rect.right\n  return {top: rect.top, bottom: rect.bottom, left: x, right: x}\n}\n\nfunction flattenH(rect, top) {\n  if (rect.height == 0) return rect\n  let y = top ? rect.top : rect.bottom\n  return {top: y, bottom: y, left: rect.left, right: rect.right}\n}\n\nfunction withFlushedState(view, state, f) {\n  let viewState = view.state, active = view.root.activeElement\n  if (viewState != state) view.updateState(state)\n  if (active != view.dom) view.focus()\n  try {\n    return f()\n  } finally {\n    if (viewState != state) view.updateState(viewState)\n    if (active != view.dom && active) active.focus()\n  }\n}\n\n// : (EditorView, number, number)\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\nfunction endOfTextblockVertical(view, state, dir) {\n  let sel = state.selection\n  let $pos = dir == \"up\" ? sel.$from : sel.$to\n  return withFlushedState(view, state, () => {\n    let {node: dom} = view.docView.domFromPos($pos.pos, dir == \"up\" ? -1 : 1)\n    for (;;) {\n      let nearest = view.docView.nearestDesc(dom, true)\n      if (!nearest) break\n      if (nearest.node.isBlock) { dom = nearest.dom; break }\n      dom = nearest.dom.parentNode\n    }\n    let coords = coordsAtPos(view, $pos.pos, 1)\n    for (let child = dom.firstChild; child; child = child.nextSibling) {\n      let boxes\n      if (child.nodeType == 1) boxes = child.getClientRects()\n      else if (child.nodeType == 3) boxes = textRange(child, 0, child.nodeValue.length).getClientRects()\n      else continue\n      for (let i = 0; i < boxes.length; i++) {\n        let box = boxes[i]\n        if (box.bottom > box.top && (dir == \"up\" ? box.bottom < coords.top + 1 : box.top > coords.bottom - 1))\n          return false\n      }\n    }\n    return true\n  })\n}\n\nconst maybeRTL = /[\\u0590-\\u08ac]/\n\nfunction endOfTextblockHorizontal(view, state, dir) {\n  let {$head} = state.selection\n  if (!$head.parent.isTextblock) return false\n  let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size\n  let sel = getSelection()\n  // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)\n    return dir == \"left\" || dir == \"backward\" ? atStart : atEnd\n\n  return withFlushedState(view, state, () => {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset\n    let oldBidiLevel = sel.caretBidiLevel // Only for Firefox\n    sel.modify(\"move\", dir, \"character\")\n    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom\n    let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||\n        (oldNode == sel.focusNode && oldOff == sel.focusOffset)\n    // Restore the previous selection\n    sel.removeAllRanges()\n    sel.addRange(oldRange)\n    if (oldBidiLevel != null) sel.caretBidiLevel = oldBidiLevel\n    return result\n  })\n}\n\nlet cachedState = null, cachedDir = null, cachedResult = false\nexport function endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) return cachedResult\n  cachedState = state; cachedDir = dir\n  return cachedResult = dir == \"up\" || dir == \"down\"\n    ? endOfTextblockVertical(view, state, dir)\n    : endOfTextblockHorizontal(view, state, dir)\n}\n","import {DOMSerializer, Fragment, Mark} from \"prosemirror-model\"\nimport {TextSelection} from \"prosemirror-state\"\n\nimport {domIndex, isEquivalentPosition, nodeSize} from \"./dom\"\nimport browser from \"./browser\"\n\n// NodeView:: interface\n//\n// By default, document nodes are rendered using the result of the\n// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n// entirely by the editor. For some use cases, such as embedded\n// node-specific editing interfaces, you want more control over\n// the behavior of a node's in-editor representation, and need to\n// [define](#view.EditorProps.nodeViews) a custom node view.\n//\n// Mark views only support `dom` and `contentDOM`, and don't support\n// any of the node view methods.\n//\n// Objects returned as node views must conform to this interface.\n//\n//   dom:: ?dom.Node\n//   The outer DOM node that represents the document node. When not\n//   given, the default strategy is used to create a DOM node.\n//\n//   contentDOM:: ?dom.Node\n//   The DOM node that should hold the node's content. Only meaningful\n//   if the node view also defines a `dom` property and if its node\n//   type is not a leaf node type. When this is present, ProseMirror\n//   will take care of rendering the node's children into it. When it\n//   is not present, the node view itself is responsible for rendering\n//   (or deciding not to render) its child nodes.\n//\n//   update:: ?(node: Node, decorations: [Decoration], innerDecorations: DecorationSource) → bool\n//   When given, this will be called when the view is updating itself.\n//   It will be given a node (possibly of a different type), an array\n//   of active decorations around the node (which are automatically\n//   drawn, and the node view may ignore if it isn't interested in\n//   them), and a [decoration source](#view.DecorationSource) that\n//   represents any decorations that apply to the content of the node\n//   (which again may be ignored). It should return true if it was\n//   able to update to that node, and false otherwise. If the node\n//   view has a `contentDOM` property (or no `dom` property), updating\n//   its child nodes will be handled by ProseMirror.\n//\n//   selectNode:: ?()\n//   Can be used to override the way the node's selected status (as a\n//   node selection) is displayed.\n//\n//   deselectNode:: ?()\n//   When defining a `selectNode` method, you should also provide a\n//   `deselectNode` method to remove the effect again.\n//\n//   setSelection:: ?(anchor: number, head: number, root: dom.Document)\n//   This will be called to handle setting the selection inside the\n//   node. The `anchor` and `head` positions are relative to the start\n//   of the node. By default, a DOM selection will be created between\n//   the DOM positions corresponding to those positions, but if you\n//   override it you can do something else.\n//\n//   stopEvent:: ?(event: dom.Event) → bool\n//   Can be used to prevent the editor view from trying to handle some\n//   or all DOM events that bubble up from the node view. Events for\n//   which this returns true are not handled by the editor.\n//\n//   ignoreMutation:: ?(dom.MutationRecord) → bool\n//   Called when a DOM\n//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n//   or a selection change happens within the view. When the change is\n//   a selection change, the record will have a `type` property of\n//   `\"selection\"` (which doesn't occur for native mutation records).\n//   Return false if the editor should re-read the selection or\n//   re-parse the range around the mutation, true if it can safely be\n//   ignored.\n//\n//   destroy:: ?()\n//   Called when the node view is removed from the editor or the whole\n//   editor is destroyed. (Not available for marks.)\n\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\n\nconst NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3\n\n// Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\nclass ViewDesc {\n  // : (?ViewDesc, [ViewDesc], dom.Node, ?dom.Node)\n  constructor(parent, children, dom, contentDOM) {\n    this.parent = parent\n    this.children = children\n    this.dom = dom\n    // An expando property on the DOM node provides a link back to its\n    // description.\n    dom.pmViewDesc = this\n    // This is the node that holds the child views. It may be null for\n    // descs that don't have children.\n    this.contentDOM = contentDOM\n    this.dirty = NOT_DIRTY\n  }\n\n  // Used to check whether a given description corresponds to a\n  // widget/mark/node.\n  matchesWidget() { return false }\n  matchesMark() { return false }\n  matchesNode() { return false }\n  matchesHack(_nodeName) { return false }\n\n  get beforePosition() { return false }\n\n  // : () → ?ParseRule\n  // When parsing in-editor content (in domchange.js), we allow\n  // descriptions to determine the parse rules that should be used to\n  // parse them.\n  parseRule() { return null }\n\n  // : (dom.Event) → bool\n  // Used by the editor's event handler to ignore events that come\n  // from certain descs.\n  stopEvent() { return false }\n\n  // The size of the content represented by this desc.\n  get size() {\n    let size = 0\n    for (let i = 0; i < this.children.length; i++) size += this.children[i].size\n    return size\n  }\n\n  // For block nodes, this represents the space taken up by their\n  // start/end tokens.\n  get border() { return 0 }\n\n  destroy() {\n    this.parent = null\n    if (this.dom.pmViewDesc == this) this.dom.pmViewDesc = null\n    for (let i = 0; i < this.children.length; i++)\n      this.children[i].destroy()\n  }\n\n  posBeforeChild(child) {\n    for (let i = 0, pos = this.posAtStart; i < this.children.length; i++) {\n      let cur = this.children[i]\n      if (cur == child) return pos\n      pos += cur.size\n    }\n  }\n\n  get posBefore() {\n    return this.parent.posBeforeChild(this)\n  }\n\n  get posAtStart() {\n    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0\n  }\n\n  get posAfter() {\n    return this.posBefore + this.size\n  }\n\n  get posAtEnd() {\n    return this.posAtStart + this.size - 2 * this.border\n  }\n\n  // : (dom.Node, number, ?number) → number\n  localPosFromDOM(dom, offset, bias) {\n    // If the DOM position is in the content, use the child desc after\n    // it to figure out a position.\n    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n      if (bias < 0) {\n        let domBefore, desc\n        if (dom == this.contentDOM) {\n          domBefore = dom.childNodes[offset - 1]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domBefore = dom.previousSibling\n        }\n        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) domBefore = domBefore.previousSibling\n        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart\n      } else {\n        let domAfter, desc\n        if (dom == this.contentDOM) {\n          domAfter = dom.childNodes[offset]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domAfter = dom.nextSibling\n        }\n        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this)) domAfter = domAfter.nextSibling\n        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd\n      }\n    }\n    // Otherwise, use various heuristics, falling back on the bias\n    // parameter, to determine whether to return the position at the\n    // start or at the end of this view desc.\n    let atEnd\n    if (dom == this.dom && this.contentDOM) {\n      atEnd = offset > domIndex(this.contentDOM)\n    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2\n    } else if (this.dom.firstChild) {\n      if (offset == 0) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = false; break }\n        if (search.parentNode.firstChild != search) break\n      }\n      if (atEnd == null && offset == dom.childNodes.length) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = true; break }\n        if (search.parentNode.lastChild != search) break\n      }\n    }\n    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart\n  }\n\n  // Scan up the dom finding the first desc that is a descendant of\n  // this one.\n  nearestDesc(dom, onlyNodes) {\n    for (let first = true, cur = dom; cur; cur = cur.parentNode) {\n      let desc = this.getDesc(cur)\n      if (desc && (!onlyNodes || desc.node)) {\n        // If dom is outside of this desc's nodeDOM, don't count it.\n        if (first && desc.nodeDOM &&\n            !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : desc.nodeDOM == dom))\n          first = false\n        else\n          return desc\n      }\n    }\n  }\n\n  getDesc(dom) {\n    let desc = dom.pmViewDesc\n    for (let cur = desc; cur; cur = cur.parent) if (cur == this) return desc\n  }\n\n  posFromDOM(dom, offset, bias) {\n    for (let scan = dom; scan; scan = scan.parentNode) {\n      let desc = this.getDesc(scan)\n      if (desc) return desc.localPosFromDOM(dom, offset, bias)\n    }\n    return -1\n  }\n\n  // : (number) → ?NodeViewDesc\n  // Find the desc for the node after the given pos, if any. (When a\n  // parent node overrode rendering, there might not be one.)\n  descAt(pos) {\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == pos && end != offset) {\n        while (!child.border && child.children.length) child = child.children[0]\n        return child\n      }\n      if (pos < end) return child.descAt(pos - offset - child.border)\n      offset = end\n    }\n  }\n\n  // : (number, number) → {node: dom.Node, offset: number}\n  domFromPos(pos, side) {\n    if (!this.contentDOM) return {node: this.dom, offset: 0}\n    for (let offset = 0, i = 0, first = true;; i++, first = false) {\n      // Skip removed or always-before children\n      while (i < this.children.length && (this.children[i].beforePosition ||\n                                          this.children[i].dom.parentNode != this.contentDOM))\n        offset += this.children[i++].size\n      let child = i == this.children.length ? null : this.children[i]\n      if (offset == pos && (side == 0 || !child || !child.size || child.border || (side < 0 && first)) ||\n          child && child.domAtom && pos < offset + child.size) return {\n        node: this.contentDOM,\n        offset: child ? domIndex(child.dom) : this.contentDOM.childNodes.length\n      }\n      if (!child) throw new Error(\"Invalid position \" + pos)\n      let end = offset + child.size\n      if (!child.domAtom && (side < 0 && !child.border ? end >= pos : end > pos) &&\n          (end > pos || i + 1 >= this.children.length || !this.children[i + 1].beforePosition))\n        return child.domFromPos(pos - offset - child.border, side)\n      offset = end\n    }\n  }\n\n  // Used to find a DOM range in a single parent for a given changed\n  // range.\n  parseRange(from, to, base = 0) {\n    if (this.children.length == 0)\n      return {node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length}\n\n    let fromOffset = -1, toOffset = -1\n    for (let offset = base, i = 0;; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (fromOffset == -1 && from <= end) {\n        let childBase = offset + child.border\n        // FIXME maybe descend mark views to parse a narrower range?\n        if (from >= childBase && to <= end - child.border && child.node &&\n            child.contentDOM && this.contentDOM.contains(child.contentDOM))\n          return child.parseRange(from, to, childBase)\n\n        from = offset\n        for (let j = i; j > 0; j--) {\n          let prev = this.children[j - 1]\n          if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {\n            fromOffset = domIndex(prev.dom) + 1\n            break\n          }\n          from -= prev.size\n        }\n        if (fromOffset == -1) fromOffset = 0\n      }\n      if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {\n        to = end\n        for (let j = i + 1; j < this.children.length; j++) {\n          let next = this.children[j]\n          if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {\n            toOffset = domIndex(next.dom)\n            break\n          }\n          to += next.size\n        }\n        if (toOffset == -1) toOffset = this.contentDOM.childNodes.length\n        break\n      }\n      offset = end\n    }\n    return {node: this.contentDOM, from, to, fromOffset, toOffset}\n  }\n\n  emptyChildAt(side) {\n    if (this.border || !this.contentDOM || !this.children.length) return false\n    let child = this.children[side < 0 ? 0 : this.children.length - 1]\n    return child.size == 0 || child.emptyChildAt(side)\n  }\n\n  // : (number) → dom.Node\n  domAfterPos(pos) {\n    let {node, offset} = this.domFromPos(pos, 0)\n    if (node.nodeType != 1 || offset == node.childNodes.length)\n      throw new RangeError(\"No node after pos \" + pos)\n    return node.childNodes[offset]\n  }\n\n  // : (number, number, dom.Document)\n  // View descs are responsible for setting any selection that falls\n  // entirely inside of them, so that custom implementations can do\n  // custom things with the selection. Note that this falls apart when\n  // a selection starts in such a node and ends in another, in which\n  // case we just use whatever domFromPos produces as a best effort.\n  setSelection(anchor, head, root, force) {\n    // If the selection falls entirely in a child, give it to that child\n    let from = Math.min(anchor, head), to = Math.max(anchor, head)\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (from > offset && to < end)\n        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force)\n      offset = end\n    }\n\n    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1)\n    let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1)\n    let domSel = root.getSelection()\n\n    let brKludge = false\n    // On Firefox, using Selection.collapse to put the cursor after a\n    // BR node for some reason doesn't always work (#1073). On Safari,\n    // the cursor sometimes inexplicable visually lags behind its\n    // reported position in such situations (#1092).\n    if ((browser.gecko || browser.safari) && anchor == head) {\n      let {node, offset} = anchorDOM\n      if (node.nodeType == 3) {\n        brKludge = offset && node.nodeValue[offset - 1] == \"\\n\"\n        // Issue #1128\n        if (brKludge && offset == node.nodeValue.length) {\n          for (let scan = node, after; scan; scan = scan.parentNode) {\n            if (after = scan.nextSibling) {\n              if (after.nodeName == \"BR\")\n                anchorDOM = headDOM = {node: after.parentNode, offset: domIndex(after) + 1}\n              break\n            }\n            let desc = scan.pmViewDesc\n            if (desc && desc.node && desc.node.isBlock) break\n          }\n        }\n      } else {\n        let prev = node.childNodes[offset - 1]\n        brKludge = prev && (prev.nodeName == \"BR\" || prev.contentEditable == \"false\")\n      }\n    }\n    // Firefox can act strangely when the selection is in front of an\n    // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536\n    if (browser.gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {\n      let after = domSel.focusNode.childNodes[domSel.focusOffset]\n      if (after && after.contentEditable == \"false\") force = true\n    }\n\n    if (!(force || brKludge && browser.safari) &&\n        isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&\n        isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))\n      return\n\n    // Selection.extend can be used to create an 'inverted' selection\n    // (one where the focus is before the anchor), but not all\n    // browsers support it yet.\n    let domSelExtended = false\n    if ((domSel.extend || anchor == head) && !brKludge) {\n      domSel.collapse(anchorDOM.node, anchorDOM.offset)\n      try {\n        if (anchor != head) domSel.extend(headDOM.node, headDOM.offset)\n        domSelExtended = true\n      } catch (err) {\n        // In some cases with Chrome the selection is empty after calling\n        // collapse, even when it should be valid. This appears to be a bug, but\n        // it is difficult to isolate. If this happens fallback to the old path\n        // without using extend.\n        if (!(err instanceof DOMException)) throw err\n        // declare global: DOMException\n      }\n    }\n    if (!domSelExtended) {\n      if (anchor > head) { let tmp = anchorDOM; anchorDOM = headDOM; headDOM = tmp }\n      let range = document.createRange()\n      range.setEnd(headDOM.node, headDOM.offset)\n      range.setStart(anchorDOM.node, anchorDOM.offset)\n      domSel.removeAllRanges()\n      domSel.addRange(range)\n    }\n  }\n\n  // : (dom.MutationRecord) → bool\n  ignoreMutation(mutation) {\n    return !this.contentDOM && mutation.type != \"selection\"\n  }\n\n  get contentLost() {\n    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM)\n  }\n\n  // Remove a subtree of the element tree that has been touched\n  // by a DOM change, so that the next update will redraw it.\n  markDirty(from, to) {\n    for (let offset = 0, i = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n        let startInside = offset + child.border, endInside = end - child.border\n        if (from >= startInside && to <= endInside) {\n          this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY\n          if (from == startInside && to == endInside &&\n              (child.contentLost || child.dom.parentNode != this.contentDOM)) child.dirty = NODE_DIRTY\n          else child.markDirty(from - startInside, to - startInside)\n          return\n        } else {\n          child.dirty = NODE_DIRTY\n        }\n      }\n      offset = end\n    }\n    this.dirty = CONTENT_DIRTY\n  }\n\n  markParentsDirty() {\n    let level = 1\n    for (let node = this.parent; node; node = node.parent, level++) {\n      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY\n      if (node.dirty < dirty) node.dirty = dirty\n    }\n  }\n\n  get domAtom() { return false }\n}\n\n// Reused array to avoid allocating fresh arrays for things that will\n// stay empty anyway.\nconst nothing = []\n\n// A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\nclass WidgetViewDesc extends ViewDesc {\n  // : (ViewDesc, Decoration)\n  constructor(parent, widget, view, pos) {\n    let self, dom = widget.type.toDOM\n    if (typeof dom == \"function\") dom = dom(view, () => {\n      if (!self) return pos\n      if (self.parent) return self.parent.posBeforeChild(self)\n    })\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        let wrap = document.createElement(\"span\")\n        wrap.appendChild(dom)\n        dom = wrap\n      }\n      dom.contentEditable = false\n      dom.classList.add(\"ProseMirror-widget\")\n    }\n    super(parent, nothing, dom, null)\n    this.widget = widget\n    self = this\n  }\n\n  get beforePosition() {\n    return this.widget.type.side < 0\n  }\n\n  matchesWidget(widget) {\n    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type)\n  }\n\n  parseRule() { return {ignore: true} }\n\n  stopEvent(event) {\n    let stop = this.widget.spec.stopEvent\n    return stop ? stop(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"selection\" || this.widget.spec.ignoreSelection\n  }\n\n  get domAtom() { return true }\n}\n\nclass CompositionViewDesc extends ViewDesc {\n  constructor(parent, dom, textDOM, text) {\n    super(parent, nothing, dom, null)\n    this.textDOM = textDOM\n    this.text = text\n  }\n\n  get size() { return this.text.length }\n\n  localPosFromDOM(dom, offset) {\n    if (dom != this.textDOM) return this.posAtStart + (offset ? this.size : 0)\n    return this.posAtStart + offset\n  }\n\n  domFromPos(pos) {\n    return {node: this.textDOM, offset: pos}\n  }\n\n  ignoreMutation(mut) {\n    return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue\n   }\n}\n\n// A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\nclass MarkViewDesc extends ViewDesc {\n  // : (ViewDesc, Mark, dom.Node)\n  constructor(parent, mark, dom, contentDOM) {\n    super(parent, [], dom, contentDOM)\n    this.mark = mark\n  }\n\n  static create(parent, mark, inline, view) {\n    let custom = view.nodeViews[mark.type.name]\n    let spec = custom && custom(mark, view, inline)\n    if (!spec || !spec.dom)\n      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline))\n    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom)\n  }\n\n  parseRule() { return {mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM} }\n\n  matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark) }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    // Move dirty info to nearest node view\n    if (this.dirty != NOT_DIRTY) {\n      let parent = this.parent\n      while (!parent.node) parent = parent.parent\n      if (parent.dirty < this.dirty) parent.dirty = this.dirty\n      this.dirty = NOT_DIRTY\n    }\n  }\n\n  slice(from, to, view) {\n    let copy = MarkViewDesc.create(this.parent, this.mark, true, view)\n    let nodes = this.children, size = this.size\n    if (to < size) nodes = replaceNodes(nodes, to, size, view)\n    if (from > 0) nodes = replaceNodes(nodes, 0, from, view)\n    for (let i = 0; i < nodes.length; i++) nodes[i].parent = copy\n    copy.children = nodes\n    return copy\n  }\n}\n\n// Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\nclass NodeViewDesc extends ViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    super(parent, node.isLeaf ? nothing : [], dom, contentDOM)\n    this.nodeDOM = nodeDOM\n    this.node = node\n    this.outerDeco = outerDeco\n    this.innerDeco = innerDeco\n    if (contentDOM) this.updateChildren(view, pos)\n  }\n\n  // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finnicky\n  // implementation details to the user code that they probably will\n  // never need.)\n  static create(parent, node, outerDeco, innerDeco, view, pos) {\n    let custom = view.nodeViews[node.type.name], descObj\n    let spec = custom && custom(node, view, () => {\n      // (This is a function that allows the custom view to find its\n      // own position)\n      if (!descObj) return pos\n      if (descObj.parent) return descObj.parent.posBeforeChild(descObj)\n    }, outerDeco, innerDeco)\n\n    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM\n    if (node.isText) {\n      if (!dom) dom = document.createTextNode(node.text)\n      else if (dom.nodeType != 3) throw new RangeError(\"Text must be rendered as a DOM text node\")\n    } else if (!dom) {\n      ;({dom, contentDOM} = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)))\n    }\n    if (!contentDOM && !node.isText && dom.nodeName != \"BR\") { // Chrome gets confused by <br contenteditable=false>\n      if (!dom.hasAttribute(\"contenteditable\")) dom.contentEditable = false\n      if (node.type.spec.draggable) dom.draggable = true\n    }\n\n    let nodeDOM = dom\n    dom = applyOuterDeco(dom, outerDeco, node)\n\n    if (spec)\n      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM,\n                                              spec, view, pos + 1)\n    else if (node.isText)\n      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view)\n    else\n      return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1)\n  }\n\n  parseRule() {\n    // Experimental kludge to allow opt-in re-parsing of nodes\n    if (this.node.type.spec.reparseInView) return null\n    // FIXME the assumption that this can always return the current\n    // attrs means that if the user somehow manages to change the\n    // attrs in the dom, that won't be picked up. Not entirely sure\n    // whether this is a problem\n    let rule = {node: this.node.type.name, attrs: this.node.attrs}\n    if (this.node.type.spec.code) rule.preserveWhitespace = \"full\"\n    if (this.contentDOM && !this.contentLost) rule.contentElement = this.contentDOM\n    else rule.getContent = () => this.contentDOM ? Fragment.empty : this.node.content\n    return rule\n  }\n\n  matchesNode(node, outerDeco, innerDeco) {\n    return this.dirty == NOT_DIRTY && node.eq(this.node) &&\n      sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco)\n  }\n\n  get size() { return this.node.nodeSize }\n\n  get border() { return this.node.isLeaf ? 0 : 1 }\n\n  // Syncs `this.children` to match `this.node.content` and the local\n  // decorations, possibly introducing nesting for marks. Then, in a\n  // separate step, syncs the DOM inside `this.contentDOM` to\n  // `this.children`.\n  updateChildren(view, pos) {\n    let inline = this.node.inlineContent, off = pos\n    let composition = inline && view.composing && this.localCompositionNode(view, pos)\n    let updater = new ViewTreeUpdater(this, composition && composition.node)\n    iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {\n      if (widget.spec.marks)\n        updater.syncToMarks(widget.spec.marks, inline, view)\n      else if (widget.type.side >= 0 && !insideNode)\n        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view)\n      // If the next node is a desc matching this widget, reuse it,\n      // otherwise insert the widget as a new view desc.\n      updater.placeWidget(widget, view, off)\n    }, (child, outerDeco, innerDeco, i) => {\n      // Make sure the wrapping mark descs match the node's marks.\n      updater.syncToMarks(child.marks, inline, view)\n      // Either find an existing desc that exactly matches this node,\n      // and drop the descs before it.\n      updater.findNodeMatch(child, outerDeco, innerDeco, i) ||\n        // Or try updating the next desc to reflect this node.\n        updater.updateNextNode(child, outerDeco, innerDeco, view, i) ||\n        // Or just add it as a new desc.\n        updater.addNode(child, outerDeco, innerDeco, view, off)\n      off += child.nodeSize\n    })\n    // Drop all remaining descs after the current position.\n    updater.syncToMarks(nothing, inline, view)\n    if (this.node.isTextblock) updater.addTextblockHacks()\n    updater.destroyRest()\n\n    // Sync the DOM if anything changed\n    if (updater.changed || this.dirty == CONTENT_DIRTY) {\n      // May have to protect focused DOM from being changed if a composition is active\n      if (composition) this.protectLocalComposition(view, composition)\n      renderDescs(this.contentDOM, this.children, view)\n      if (browser.ios) iosHacks(this.dom)\n    }\n  }\n\n  localCompositionNode(view, pos) {\n    // Only do something if both the selection and a focused text node\n    // are inside of this node, and the node isn't already part of a\n    // view that's a child of this view\n    let {from, to} = view.state.selection\n    if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size) return\n    let sel = view.root.getSelection()\n    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset)\n    if (!textNode || !this.dom.contains(textNode.parentNode)) return\n\n    // Find the text in the focused node in the node, stop if it's not\n    // there (may have been modified through other means, in which\n    // case it should overwritten)\n    let text = textNode.nodeValue\n    let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos)\n\n    return textPos < 0 ? null : {node: textNode, pos: textPos, text}\n  }\n\n  protectLocalComposition(view, {node, pos, text}) {\n    // The node is already part of a local view desc, leave it there\n    if (this.getDesc(node)) return\n\n    // Create a composition view for the orphaned nodes\n    let topNode = node\n    for (;; topNode = topNode.parentNode) {\n      if (topNode.parentNode == this.contentDOM) break\n      while (topNode.previousSibling) topNode.parentNode.removeChild(topNode.previousSibling)\n      while (topNode.nextSibling) topNode.parentNode.removeChild(topNode.nextSibling)\n      if (topNode.pmViewDesc) topNode.pmViewDesc = null\n    }\n    let desc = new CompositionViewDesc(this, topNode, node, text)\n    view.compositionNodes.push(desc)\n\n    // Patch up this.children to contain the composition view\n    this.children = replaceNodes(this.children, pos, pos + text.length, view, desc)\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView) → bool\n  // If this desc be updated to match the given node decoration,\n  // do so and return true.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY ||\n        !node.sameMarkup(this.node)) return false\n    this.updateInner(node, outerDeco, innerDeco, view)\n    return true\n  }\n\n  updateInner(node, outerDeco, innerDeco, view) {\n    this.updateOuterDeco(outerDeco)\n    this.node = node\n    this.innerDeco = innerDeco\n    if (this.contentDOM) this.updateChildren(view, this.posAtStart)\n    this.dirty = NOT_DIRTY\n  }\n\n  updateOuterDeco(outerDeco) {\n    if (sameOuterDeco(outerDeco, this.outerDeco)) return\n    let needsWrap = this.nodeDOM.nodeType != 1\n    let oldDOM = this.dom\n    this.dom = patchOuterDeco(this.dom, this.nodeDOM,\n                              computeOuterDeco(this.outerDeco, this.node, needsWrap),\n                              computeOuterDeco(outerDeco, this.node, needsWrap))\n    if (this.dom != oldDOM) {\n      oldDOM.pmViewDesc = null\n      this.dom.pmViewDesc = this\n    }\n    this.outerDeco = outerDeco\n  }\n\n  // Mark this node as being the selected node.\n  selectNode() {\n    this.nodeDOM.classList.add(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.draggable = true\n  }\n\n  // Remove selected node marking from this node.\n  deselectNode() {\n    this.nodeDOM.classList.remove(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.removeAttribute(\"draggable\")\n  }\n\n  get domAtom() { return this.node.isAtom }\n}\n\n// Create a view desc for the top-level document node, to be exported\n// and used by the view class.\nexport function docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc)\n  return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0)\n}\n\nclass TextViewDesc extends NodeViewDesc {\n  constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view)\n  }\n\n  parseRule() {\n    let skip = this.nodeDOM.parentNode\n    while (skip && skip != this.dom && !skip.pmIsDeco) skip = skip.parentNode\n    return {skip: skip || true}\n  }\n\n  update(node, outerDeco, _, view) {\n    if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||\n        !node.sameMarkup(this.node)) return false\n    this.updateOuterDeco(outerDeco)\n    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {\n      this.nodeDOM.nodeValue = node.text\n      if (view.trackWrites == this.nodeDOM) view.trackWrites = null\n    }\n    this.node = node\n    this.dirty = NOT_DIRTY\n    return true\n  }\n\n  inParent() {\n    let parentDOM = this.parent.contentDOM\n    for (let n = this.nodeDOM; n; n = n.parentNode) if (n == parentDOM) return true\n    return false\n  }\n\n  domFromPos(pos) {\n    return {node: this.nodeDOM, offset: pos}\n  }\n\n  localPosFromDOM(dom, offset, bias) {\n    if (dom == this.nodeDOM) return this.posAtStart + Math.min(offset, this.node.text.length)\n    return super.localPosFromDOM(dom, offset, bias)\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"characterData\" && mutation.type != \"selection\"\n  }\n\n  slice(from, to, view) {\n    let node = this.node.cut(from, to), dom = document.createTextNode(node.text)\n    return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view)\n  }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))\n      this.dirty = NODE_DIRTY\n  }\n\n  get domAtom() { return false }\n}\n\n// A dummy desc used to tag trailing BR or IMG nodes created to work\n// around contentEditable terribleness.\nclass TrailingHackViewDesc extends ViewDesc {\n  parseRule() { return {ignore: true} }\n  matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName }\n  get domAtom() { return true }\n}\n\n// A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\nclass CustomNodeViewDesc extends NodeViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, NodeView, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {\n    super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos)\n    this.spec = spec\n  }\n\n  // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY) return false\n    if (this.spec.update) {\n      let result = this.spec.update(node, outerDeco, innerDeco)\n      if (result) this.updateInner(node, outerDeco, innerDeco, view)\n      return result\n    } else if (!this.contentDOM && !node.isLeaf) {\n      return false\n    } else {\n      return super.update(node, outerDeco, innerDeco, view)\n    }\n  }\n\n  selectNode() {\n    this.spec.selectNode ? this.spec.selectNode() : super.selectNode()\n  }\n\n  deselectNode() {\n    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode()\n  }\n\n  setSelection(anchor, head, root, force) {\n    this.spec.setSelection ? this.spec.setSelection(anchor, head, root)\n      : super.setSelection(anchor, head, root, force)\n  }\n\n  destroy() {\n    if (this.spec.destroy) this.spec.destroy()\n    super.destroy()\n  }\n\n  stopEvent(event) {\n    return this.spec.stopEvent ? this.spec.stopEvent(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation)\n  }\n}\n\n// : (dom.Node, [ViewDesc])\n// Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\nfunction renderDescs(parentDOM, descs, view) {\n  let dom = parentDOM.firstChild, written = false\n  for (let i = 0; i < descs.length; i++) {\n    let desc = descs[i], childDOM = desc.dom\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) { dom = rm(dom); written = true }\n      dom = dom.nextSibling\n    } else {\n      written = true\n      parentDOM.insertBefore(childDOM, dom)\n    }\n    if (desc instanceof MarkViewDesc) {\n      let pos = dom ? dom.previousSibling : parentDOM.lastChild\n      renderDescs(desc.contentDOM, desc.children, view)\n      dom = pos ? pos.nextSibling : parentDOM.firstChild\n    }\n  }\n  while (dom) { dom = rm(dom); written = true }\n  if (written && view.trackWrites == parentDOM) view.trackWrites = null\n}\n\nfunction OuterDecoLevel(nodeName) {\n  if (nodeName) this.nodeName = nodeName\n}\nOuterDecoLevel.prototype = Object.create(null)\n\nconst noDeco = [new OuterDecoLevel]\n\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) return noDeco\n\n  let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top]\n\n  for (let i = 0; i < outerDeco.length; i++) {\n    let attrs = outerDeco[i].type.attrs\n    if (!attrs) continue\n    if (attrs.nodeName)\n      result.push(top = new OuterDecoLevel(attrs.nodeName))\n\n    for (let name in attrs) {\n      let val = attrs[name]\n      if (val == null) continue\n      if (needsWrap && result.length == 1)\n        result.push(top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"))\n      if (name == \"class\") top.class = (top.class ? top.class + \" \" : \"\") + val\n      else if (name == \"style\") top.style = (top.style ? top.style + \";\" : \"\") + val\n      else if (name != \"nodeName\") top[name] = val\n    }\n  }\n\n  return result\n}\n\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) return nodeDOM\n\n  let curDOM = nodeDOM\n  for (let i = 0; i < curComputed.length; i++) {\n    let deco = curComputed[i], prev = prevComputed[i]\n    if (i) {\n      let parent\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&\n          (parent = curDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {\n        curDOM = parent\n      } else {\n        parent = document.createElement(deco.nodeName)\n        parent.pmIsDeco = true\n        parent.appendChild(curDOM)\n        prev = noDeco[0]\n        curDOM = parent\n      }\n    }\n    patchAttributes(curDOM, prev || noDeco[0], deco)\n  }\n  return curDOM\n}\n\nfunction patchAttributes(dom, prev, cur) {\n  for (let name in prev)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur))\n      dom.removeAttribute(name)\n  for (let name in cur)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && cur[name] != prev[name])\n      dom.setAttribute(name, cur[name])\n  if (prev.class != cur.class) {\n    let prevList = prev.class ? prev.class.split(\" \").filter(Boolean) : nothing\n    let curList = cur.class ? cur.class.split(\" \").filter(Boolean) : nothing\n    for (let i = 0; i < prevList.length; i++) if (curList.indexOf(prevList[i]) == -1)\n      dom.classList.remove(prevList[i])\n    for (let i = 0; i < curList.length; i++) if (prevList.indexOf(curList[i]) == -1)\n      dom.classList.add(curList[i])\n  }\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      let prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g, m\n      while (m = prop.exec(prev.style))\n        dom.style.removeProperty(m[1])\n    }\n    if (cur.style)\n      dom.style.cssText += cur.style\n  }\n}\n\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1))\n}\n\n// : ([Decoration], [Decoration]) → bool\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) return false\n  for (let i = 0; i < a.length; i++) if (!a[i].type.eq(b[i].type)) return false\n  return true\n}\n\n// Remove a DOM node and return its next sibling.\nfunction rm(dom) {\n  let next = dom.nextSibling\n  dom.parentNode.removeChild(dom)\n  return next\n}\n\n// Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\nclass ViewTreeUpdater {\n  // : (NodeViewDesc)\n  constructor(top, lockedNode) {\n    this.top = top\n    this.lock = lockedNode\n    // Index into `this.top`'s child array, represents the current\n    // update position.\n    this.index = 0\n    // When entering a mark, the current top and index are pushed\n    // onto this.\n    this.stack = []\n    // Tracks whether anything was changed\n    this.changed = false\n\n    this.preMatch = preMatch(top.node.content, top.children)\n  }\n\n  // Destroy and remove the children between the given indices in\n  // `this.top`.\n  destroyBetween(start, end) {\n    if (start == end) return\n    for (let i = start; i < end; i++) this.top.children[i].destroy()\n    this.top.children.splice(start, end - start)\n    this.changed = true\n  }\n\n  // Destroy all remaining children in `this.top`.\n  destroyRest() {\n    this.destroyBetween(this.index, this.top.children.length)\n  }\n\n  // : ([Mark], EditorView)\n  // Sync the current stack of mark descs with the given array of\n  // marks, reusing existing mark descs when possible.\n  syncToMarks(marks, inline, view) {\n    let keep = 0, depth = this.stack.length >> 1\n    let maxKeep = Math.min(depth, marks.length)\n    while (keep < maxKeep &&\n           (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)\n      keep++\n\n    while (keep < depth) {\n      this.destroyRest()\n      this.top.dirty = NOT_DIRTY\n      this.index = this.stack.pop()\n      this.top = this.stack.pop()\n      depth--\n    }\n    while (depth < marks.length) {\n      this.stack.push(this.top, this.index + 1)\n      let found = -1\n      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n        if (this.top.children[i].matchesMark(marks[depth])) { found = i; break }\n      }\n      if (found > -1) {\n        if (found > this.index) {\n          this.changed = true\n          this.destroyBetween(this.index, found)\n        }\n        this.top = this.top.children[this.index]\n      } else {\n        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view)\n        this.top.children.splice(this.index, 0, markDesc)\n        this.top = markDesc\n        this.changed = true\n      }\n      this.index = 0\n      depth++\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSource) → bool\n  // Try to find a node desc matching the given data. Skip over it and\n  // return true when successful.\n  findNodeMatch(node, outerDeco, innerDeco, index) {\n    let children = this.top.children, found = -1\n    if (index >= this.preMatch.index) {\n      for (let i = this.index; i < children.length; i++) if (children[i].matchesNode(node, outerDeco, innerDeco)) {\n        found = i\n        break\n      }\n    } else {\n      for (let i = this.index, e = Math.min(children.length, i + 1); i < e; i++) {\n        let child = children[i]\n        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {\n          found = i\n          break\n        }\n      }\n    }\n    if (found < 0) return false\n    this.destroyBetween(this.index, found)\n    this.index++\n    return true\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView, Fragment, number) → bool\n  // Try to update the next node, if any, to the given data. Checks\n  // pre-matches to avoid overwriting nodes that could still be used.\n  updateNextNode(node, outerDeco, innerDeco, view, index) {\n    for (let i = this.index; i < this.top.children.length; i++) {\n      let next = this.top.children[i]\n      if (next instanceof NodeViewDesc) {\n        let preMatch = this.preMatch.matched.get(next)\n        if (preMatch != null && preMatch != index) return false\n        let nextDOM = next.dom\n\n        // Can't update if nextDOM is or contains this.lock, except if\n        // it's a text node whose content already matches the new text\n        // and whose decorations match the new ones.\n        let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&\n            !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&\n              next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco))\n        if (!locked && next.update(node, outerDeco, innerDeco, view)) {\n          this.destroyBetween(this.index, i)\n          if (next.dom != nextDOM) this.changed = true\n          this.index++\n          return true\n        }\n        break\n      }\n    }\n    return false\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView)\n  // Insert the node as a newly created node desc.\n  addNode(node, outerDeco, innerDeco, view, pos) {\n    this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos))\n    this.changed = true\n  }\n\n  placeWidget(widget, view, pos) {\n    let next = this.index < this.top.children.length ? this.top.children[this.index] : null\n    if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {\n      this.index++\n    } else {\n      let desc = new WidgetViewDesc(this.top, widget, view, pos)\n      this.top.children.splice(this.index++, 0, desc)\n      this.changed = true\n    }\n  }\n\n  // Make sure a textblock looks and behaves correctly in\n  // contentEditable.\n  addTextblockHacks() {\n    let lastChild = this.top.children[this.index - 1]\n    while (lastChild instanceof MarkViewDesc) lastChild = lastChild.children[lastChild.children.length - 1]\n\n    if (!lastChild || // Empty textblock\n        !(lastChild instanceof TextViewDesc) ||\n        /\\n$/.test(lastChild.node.text)) {\n      // Avoid a bug in Safari's cursor drawing (#1165)\n      if (browser.safari && lastChild && lastChild.dom.contentEditable == \"false\")\n        this.addHackNode(\"IMG\")\n      this.addHackNode(\"BR\")\n    }\n  }\n\n  addHackNode(nodeName) {\n    if (this.index < this.top.children.length && this.top.children[this.index].matchesHack(nodeName)) {\n      this.index++\n    } else {\n      let dom = document.createElement(nodeName)\n      this.top.children.splice(this.index++, 0, new TrailingHackViewDesc(this.top, nothing, dom, null))\n      this.changed = true\n    }\n  }\n}\n\n// : (Fragment, [ViewDesc]) → {index: number, matched: Map<ViewDesc, number>}\n// Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing those\n// for other nodes. Returns the fragment index of the first node that\n// is part of the sequence of matched nodes at the end of the\n// fragment.\nfunction preMatch(frag, descs) {\n  let fI = frag.childCount, dI = descs.length, matched = new Map\n  for (; fI > 0 && dI > 0; dI--) {\n    let desc = descs[dI - 1], node = desc.node\n    if (!node) continue\n    if (node != frag.child(fI - 1)) break\n    --fI\n    matched.set(desc, fI)\n  }\n  return {index: fI, matched}\n}\n\nfunction compareSide(a, b) { return a.type.side - b.type.side }\n\n// : (ViewDesc, DecorationSource, (Decoration, number), (Node, [Decoration], DecorationSource, number))\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  let locals = deco.locals(parent), offset = 0\n  // Simple, cheap variant for when there are no local decorations\n  if (locals.length == 0) {\n    for (let i = 0; i < parent.childCount; i++) {\n      let child = parent.child(i)\n      onNode(child, locals, deco.forChild(offset, child), i)\n      offset += child.nodeSize\n    }\n    return\n  }\n\n  let decoIndex = 0, active = [], restNode = null\n  for (let parentIndex = 0;;) {\n    if (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      let widget = locals[decoIndex++], widgets\n      while (decoIndex < locals.length && locals[decoIndex].to == offset)\n        (widgets || (widgets = [widget])).push(locals[decoIndex++])\n      if (widgets) {\n        widgets.sort(compareSide)\n        for (let i = 0; i < widgets.length; i++) onWidget(widgets[i], parentIndex, !!restNode)\n      } else {\n        onWidget(widget, parentIndex, !!restNode)\n      }\n    }\n\n    let child, index\n    if (restNode) {\n      index = -1\n      child = restNode\n      restNode = null\n    } else if (parentIndex < parent.childCount) {\n      index = parentIndex\n      child = parent.child(parentIndex++)\n    } else {\n      break\n    }\n\n    for (let i = 0; i < active.length; i++) if (active[i].to <= offset) active.splice(i--, 1)\n    while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)\n      active.push(locals[decoIndex++])\n\n    let end = offset + child.nodeSize\n    if (child.isText) {\n      let cutAt = end\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) cutAt = locals[decoIndex].from\n      for (let i = 0; i < active.length; i++) if (active[i].to < cutAt) cutAt = active[i].to\n      if (cutAt < end) {\n        restNode = child.cut(cutAt - offset)\n        child = child.cut(0, cutAt - offset)\n        end = cutAt\n        index = -1\n      }\n    }\n\n    let outerDeco = !active.length ? nothing\n        : child.isInline && !child.isLeaf ? active.filter(d => !d.inline)\n        : active.slice()\n    onNode(child, outerDeco, deco.forChild(offset, child), index)\n    offset = end\n  }\n}\n\n// List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    let oldCSS = dom.style.cssText\n    dom.style.cssText = oldCSS + \"; list-style: square !important\"\n    window.getComputedStyle(dom).listStyle\n    dom.style.cssText = oldCSS\n  }\n}\n\nfunction nearbyTextNode(node, offset) {\n  for (;;) {\n    if (node.nodeType == 3) return node\n    if (node.nodeType == 1 && offset > 0) {\n      if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)\n        return node.childNodes[offset]\n      node = node.childNodes[offset - 1]\n      offset = nodeSize(node)\n    } else if (node.nodeType == 1 && offset < node.childNodes.length) {\n      node = node.childNodes[offset]\n      offset = 0\n    } else {\n      return null\n    }\n  }\n}\n\n// Find a piece of text in an inline fragment, overlapping from-to\nfunction findTextInFragment(frag, text, from, to) {\n  for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {\n    let child = frag.child(i++), childStart = pos\n    pos += child.nodeSize\n    if (!child.isText) continue\n    let str = child.text\n    while (i < frag.childCount) {\n      let next = frag.child(i++)\n      pos += next.nodeSize\n      if (!next.isText) break\n      str += next.text\n    }\n    if (pos >= from) {\n      let found = str.lastIndexOf(text, to - childStart)\n      if (found >= 0 && found + text.length + childStart >= from)\n        return childStart + found\n    }\n  }\n  return -1\n}\n\n// Replace range from-to in an array of view descs with replacement\n// (may be null to just delete). This goes very much against the grain\n// of the rest of this code, which tends to create nodes with the\n// right shape in one go, rather than messing with them after\n// creation, but is necessary in the composition hack.\nfunction replaceNodes(nodes, from, to, view, replacement) {\n  let result = []\n  for (let i = 0, off = 0; i < nodes.length; i++) {\n    let child = nodes[i], start = off, end = off += child.size\n    if (start >= to || end <= from) {\n      result.push(child)\n    } else {\n      if (start < from) result.push(child.slice(0, from - start, view))\n      if (replacement) {\n        result.push(replacement)\n        replacement = null\n      }\n      if (end > to) result.push(child.slice(to - start, child.size, view))\n    }\n  }\n  return result\n}\n","import {Selection, NodeSelection, TextSelection, AllSelection} from \"prosemirror-state\"\nimport browser from \"./browser\"\nimport {domIndex, selectionCollapsed} from \"./dom\"\nimport {selectionToDOM} from \"./selection\"\n\nfunction moveSelectionBlock(state, dir) {\n  let {$anchor, $head} = state.selection\n  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head)\n  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null\n  return $start && Selection.findFrom($start, dir)\n}\n\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView())\n  return true\n}\n\nfunction selectHorizontally(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection) {\n    if (!sel.empty || mods.indexOf(\"s\") > -1) {\n      return false\n    } else if (view.endOfTextblock(dir > 0 ? \"right\" : \"left\")) {\n      let next = moveSelectionBlock(view.state, dir)\n      if (next && (next instanceof NodeSelection)) return apply(view, next)\n      return false\n    } else if (!(browser.mac && mods.indexOf(\"m\") > -1)) {\n      let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc\n      if (!node || node.isText) return false\n      let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos\n      if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)) return false\n      if (NodeSelection.isSelectable(node)) {\n        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head))\n      } else if (browser.webkit) {\n        // Chrome and Safari will introduce extra pointless cursor\n        // positions around inline uneditable nodes, so we have to\n        // take over and move the cursor past them (#937)\n        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)))\n      } else {\n        return false\n      }\n    }\n  } else if (sel instanceof NodeSelection && sel.node.isInline) {\n    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from))\n  } else {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next) return apply(view, next)\n    return false\n  }\n}\n\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nfunction isIgnorable(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != \"BR\")\n}\n\n// Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\nfunction skipIgnoredNodesLeft(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let moveNode, moveOffset, force = false\n  // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n  if (browser.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) force = true\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        break\n      } else {\n        let before = node.childNodes[offset - 1]\n        if (isIgnorable(before)) {\n          moveNode = node\n          moveOffset = --offset\n        } else if (before.nodeType == 3) {\n          node = before\n          offset = node.nodeValue.length\n        } else break\n      }\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let prev = node.previousSibling\n      while (prev && isIgnorable(prev)) {\n        moveNode = node.parentNode\n        moveOffset = domIndex(prev)\n        prev = prev.previousSibling\n      }\n      if (!prev) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = 0\n      } else {\n        node = prev\n        offset = nodeLen(node)\n      }\n    }\n  }\n  if (force) setSelFocus(view, sel, node, offset)\n  else if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\n// Make sure the cursor isn't directly before one or more ignored\n// nodes.\nfunction skipIgnoredNodesRight(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let len = nodeLen(node)\n  let moveNode, moveOffset\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) break\n      let after = node.childNodes[offset]\n      if (isIgnorable(after)) {\n        moveNode = node\n        moveOffset = ++offset\n      }\n      else break\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let next = node.nextSibling\n      while (next && isIgnorable(next)) {\n        moveNode = next.parentNode\n        moveOffset = domIndex(next) + 1\n        next = next.nextSibling\n      }\n      if (!next) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = len = 0\n      } else {\n        node = next\n        offset = 0\n        len = nodeLen(node)\n      }\n    }\n  }\n  if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\nfunction isBlockNode(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.node && desc.node.isBlock\n}\n\nfunction setSelFocus(view, sel, node, offset) {\n  if (selectionCollapsed(sel)) {\n    let range = document.createRange()\n    range.setEnd(node, offset)\n    range.setStart(node, offset)\n    sel.removeAllRanges()\n    sel.addRange(range)\n  } else if (sel.extend) {\n    sel.extend(node, offset)\n  }\n  view.domObserver.setCurSelection()\n  let {state} = view\n  // If no state update ends up happening, reset the selection.\n  setTimeout(() => {\n    if (view.state == state) selectionToDOM(view)\n  }, 50)\n}\n\n// : (EditorState, number)\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\nfunction selectVertically(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection && !sel.empty || mods.indexOf(\"s\") > -1) return false\n  if (browser.mac && mods.indexOf(\"m\") > -1) return false\n  let {$from, $to} = sel\n\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next && (next instanceof NodeSelection))\n      return apply(view, next)\n  }\n  if (!$from.parent.inlineContent) {\n    let side = dir < 0 ? $from : $to\n    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir)\n    return beyond ? apply(view, beyond) : false\n  }\n  return false\n}\n\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof TextSelection)) return true\n  let {$head, $anchor, empty} = view.state.selection\n  if (!$head.sameParent($anchor)) return true\n  if (!empty) return false\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) return true\n  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter)\n  if (nextNode && !nextNode.isText) {\n    let tr = view.state.tr\n    if (dir < 0) tr.delete($head.pos - nextNode.nodeSize, $head.pos)\n    else tr.delete($head.pos, $head.pos + nextNode.nodeSize)\n    view.dispatch(tr)\n    return true\n  }\n  return false\n}\n\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop()\n  node.contentEditable = state\n  view.domObserver.start()\n}\n\n// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Safari (and at some point in the past, Chrome) does really\n// wrong things when the down arrow is pressed when the cursor is\n// directly at the start of a textblock and has an uneditable node\n// after it\nfunction safariDownArrowBug(view) {\n  if (!browser.safari || view.state.selection.$head.parentOffset > 0) return\n  let {focusNode, focusOffset} = view.root.getSelection()\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&\n      focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    let child = focusNode.firstChild\n    switchEditable(view, child, true)\n    setTimeout(() => switchEditable(view, child, false), 20)\n  }\n}\n\n// A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\n\nfunction getMods(event) {\n  let result = \"\"\n  if (event.ctrlKey) result += \"c\"\n  if (event.metaKey) result += \"m\"\n  if (event.altKey) result += \"a\"\n  if (event.shiftKey) result += \"s\"\n  return result\n}\n\nexport function captureKeyDown(view, event) {\n  let code = event.keyCode, mods = getMods(event)\n  if (code == 8 || (browser.mac && code == 72 && mods == \"c\")) { // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 46 || (browser.mac && code == 68 && mods == \"c\")) { // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view)\n  } else if (code == 13 || code == 27) { // Enter, Esc\n    return true\n  } else if (code == 37) { // Left arrow\n    return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 39) { // Right arrow\n    return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (code == 38) { // Up arrow\n    return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 40) { // Down arrow\n    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (mods == (browser.mac ? \"m\" : \"c\") &&\n             (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]\n    return true\n  }\n  return false\n}\n","import {Fragment, DOMParser} from \"prosemirror-model\"\nimport {Selection, TextSelection} from \"prosemirror-state\"\n\nimport {selectionBetween, selectionFromDOM, selectionToDOM} from \"./selection\"\nimport {selectionCollapsed, keyEvent} from \"./dom\"\nimport browser from \"./browser\"\n\n// Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\n\nfunction parseBetween(view, from_, to_) {\n  let {node: parent, fromOffset, toOffset, from, to} = view.docView.parseRange(from_, to_)\n\n  let domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{node: anchor, offset: domSel.anchorOffset}]\n    if (!selectionCollapsed(domSel))\n      find.push({node: domSel.focusNode, offset: domSel.focusOffset})\n  }\n  // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n  if (browser.chrome && view.lastKeyCode === 8) {\n    for (let off = toOffset; off > fromOffset; off--) {\n      let node = parent.childNodes[off - 1], desc = node.pmViewDesc\n      if (node.nodeName == \"BR\" && !desc) { toOffset = off; break }\n      if (!desc || desc.size) break\n    }\n  }\n  let startDoc = view.state.doc\n  let parser = view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n  let $from = startDoc.resolve(from)\n\n  let sel = null, doc = parser.parse(parent, {\n    topNode: $from.parent,\n    topMatch: $from.parent.contentMatchAt($from.index()),\n    topOpen: true,\n    from: fromOffset,\n    to: toOffset,\n    preserveWhitespace: $from.parent.type.spec.code ? \"full\" : true,\n    editableContent: true,\n    findPositions: find,\n    ruleFromNode,\n    context: $from\n  })\n  if (find && find[0].pos != null) {\n    let anchor = find[0].pos, head = find[1] && find[1].pos\n    if (head == null) head = anchor\n    sel = {anchor: anchor + from, head: head + from}\n  }\n  return {doc, sel, from, to}\n}\n\nfunction ruleFromNode(dom) {\n  let desc = dom.pmViewDesc\n  if (desc) {\n    return desc.parseRule()\n  } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n    // Safari replaces the list item or table cell with a BR\n    // directly in the list node (?!) if you delete the last\n    // character in a list item or table cell (#708, #862)\n    if (browser.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {\n      let skip = document.createElement(\"div\")\n      skip.appendChild(document.createElement(\"li\"))\n      return {skip}\n    } else if (dom.parentNode.lastChild == dom || browser.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {\n      return {ignore: true}\n    }\n  } else if (dom.nodeName == \"IMG\" && dom.getAttribute(\"mark-placeholder\")) {\n    return {ignore: true}\n  }\n}\n\nexport function readDOMChange(view, from, to, typeOver, addedNodes) {\n  if (from < 0) {\n    let origin = view.lastSelectionTime > Date.now() - 50 ? view.lastSelectionOrigin : null\n    let newSel = selectionFromDOM(view, origin)\n    if (newSel && !view.state.selection.eq(newSel)) {\n      let tr = view.state.tr.setSelection(newSel)\n      if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n      else if (origin == \"key\") tr.scrollIntoView()\n      view.dispatch(tr)\n    }\n    return\n  }\n\n  let $before = view.state.doc.resolve(from)\n  let shared = $before.sharedDepth(to)\n  from = $before.before(shared + 1)\n  to = view.state.doc.resolve(to).after(shared + 1)\n\n  let sel = view.state.selection\n  let parse = parseBetween(view, from, to)\n  // Chrome sometimes leaves the cursor before the inserted text when\n  // composing after a cursor wrapper. This moves it forward.\n  if (browser.chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from) {\n    let text = view.cursorWrapper.deco.type.toDOM.nextSibling\n    let size = text && text.nodeValue ? text.nodeValue.length : 1\n    parse.sel = {anchor: parse.sel.anchor + size, head: parse.sel.anchor + size}\n  }\n\n  let doc = view.state.doc, compare = doc.slice(parse.from, parse.to)\n  let preferredPos, preferredSide\n  // Prefer anchoring to end when Backspace is pressed\n  if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {\n    preferredPos = view.state.selection.to\n    preferredSide = \"end\"\n  } else {\n    preferredPos = view.state.selection.from\n    preferredSide = \"start\"\n  }\n  view.lastKeyCode = null\n\n  let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide)\n  if (!change) {\n    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&\n        !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {\n      change = {start: sel.from, endA: sel.to, endB: sel.to}\n    } else if ((browser.ios && view.lastIOSEnter > Date.now() - 225 || browser.android) &&\n               addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\") &&\n               view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n      view.lastIOSEnter = 0\n      return\n    } else {\n      if (parse.sel) {\n        let sel = resolveSelection(view, view.state.doc, parse.sel)\n        if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n      }\n      return\n    }\n  }\n  view.domChangeCount++\n  // Handle the case where overwriting a selection by typing matches\n  // the start or end of the selected content, creating a change\n  // that's smaller than what was actually overwritten.\n  if (view.state.selection.from < view.state.selection.to &&\n      change.start == change.endB &&\n      view.state.selection instanceof TextSelection) {\n    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2) {\n      change.start = view.state.selection.from\n    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2) {\n      change.endB += (view.state.selection.to - change.endA)\n      change.endA = view.state.selection.to\n    }\n  }\n\n  // IE11 will insert a non-breaking space _ahead_ of the space after\n  // the cursor space when adding a space before another space. When\n  // that happened, adjust the change to cover the space instead.\n  if (browser.ie && browser.ie_version <= 11 && change.endB == change.start + 1 &&\n      change.endA == change.start && change.start > parse.from &&\n      parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == \" \\u00a0\") {\n    change.start--\n    change.endA--\n    change.endB--\n  }\n\n  let $from = parse.doc.resolveNoCache(change.start - parse.from)\n  let $to = parse.doc.resolveNoCache(change.endB - parse.from)\n  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent\n  let nextSel\n  // If this looks like the effect of pressing Enter (or was recorded\n  // as being an iOS enter press), just dispatch an Enter key instead.\n  if (((browser.ios && view.lastIOSEnter > Date.now() - 225 &&\n        (!inlineChange || addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\"))) ||\n       (!inlineChange && $from.pos < parse.doc.content.size &&\n        (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&\n        nextSel.head == $to.pos)) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n    view.lastIOSEnter = 0\n    return\n  }\n  // Same for backspace\n  if (view.state.selection.anchor > change.start &&\n      looksLikeJoin(doc, change.start, change.endA, $from, $to) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) {\n    if (browser.android && browser.chrome) view.domObserver.suppressSelectionUpdates() // #820\n    return\n  }\n\n  // Chrome Android will occasionally, during composition, delete the\n  // entire composition and then immediately insert it again. This is\n  // used to detect that situation.\n  if (browser.chrome && browser.android && change.toB == change.from)\n    view.lastAndroidDelete = Date.now()\n\n  // This tries to detect Android virtual keyboard\n  // enter-and-pick-suggestion action. That sometimes (see issue\n  // #1059) first fires a DOM mutation, before moving the selection to\n  // the newly created block. And then, because ProseMirror cleans up\n  // the DOM selection, it gives up moving the selection entirely,\n  // leaving the cursor in the wrong place. When that happens, we drop\n  // the new paragraph from the initial change, and fire a simulated\n  // enter key afterwards.\n  if (browser.android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&\n      parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {\n    change.endB -= 2\n    $to = parse.doc.resolveNoCache(change.endB - parse.from)\n    setTimeout(() => {\n      view.someProp(\"handleKeyDown\", function (f) { return f(view, keyEvent(13, \"Enter\")); })\n    }, 20)\n  }\n\n  let chFrom = change.start, chTo = change.endA\n\n  let tr, storedMarks, markChange, $from1\n  if (inlineChange) {\n    if ($from.pos == $to.pos) { // Deletion\n      // IE11 sometimes weirdly moves the DOM selection around after\n      // backspacing out the first element in a textblock\n      if (browser.ie && browser.ie_version <= 11 && $from.parentOffset == 0) {\n        view.domObserver.suppressSelectionUpdates()\n        setTimeout(() => selectionToDOM(view), 20)\n      }\n      tr = view.state.tr.delete(chFrom, chTo)\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA))\n    } else if ( // Adding or removing a mark\n      change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&\n      (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset),\n                                 $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))\n    ) {\n      tr = view.state.tr\n      if (markChange.type == \"add\") tr.addMark(chFrom, chTo, markChange.mark)\n      else tr.removeMark(chFrom, chTo, markChange.mark)\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset)\n      if (view.someProp(\"handleTextInput\", f => f(view, chFrom, chTo, text))) return\n      tr = view.state.tr.insertText(text, chFrom, chTo)\n    }\n  }\n\n  if (!tr)\n    tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from))\n  if (parse.sel) {\n    let sel = resolveSelection(view, tr.doc, parse.sel)\n    // Chrome Android will sometimes, during composition, report the\n    // selection in the wrong place. If it looks like that is\n    // happening, don't update the selection.\n    // Edge just doesn't move the cursor forward when you start typing\n    // in an empty block or between br nodes.\n    if (sel && !(browser.chrome && browser.android && view.composing && sel.empty &&\n                 (change.start != change.endB || view.lastAndroidDelete < Date.now() - 100) &&\n                 (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||\n                 browser.ie && sel.empty && sel.head == chFrom))\n      tr.setSelection(sel)\n  }\n  if (storedMarks) tr.ensureMarks(storedMarks)\n  view.dispatch(tr.scrollIntoView())\n}\n\nfunction resolveSelection(view, doc, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) return null\n  return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head))\n}\n\n// : (Fragment, Fragment) → ?{mark: Mark, type: string}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\nfunction isMarkChange(cur, prev) {\n  let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks\n  let added = curMarks, removed = prevMarks, type, mark, update\n  for (let i = 0; i < prevMarks.length; i++) added = prevMarks[i].removeFromSet(added)\n  for (let i = 0; i < curMarks.length; i++) removed = curMarks[i].removeFromSet(removed)\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0]\n    type = \"add\"\n    update = node => node.mark(mark.addToSet(node.marks))\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0]\n    type = \"remove\"\n    update = node => node.mark(mark.removeFromSet(node.marks))\n  } else {\n    return null\n  }\n  let updated = []\n  for (let i = 0; i < prev.childCount; i++) updated.push(update(prev.child(i)))\n  if (Fragment.from(updated).eq(cur)) return {mark, type}\n}\n\nfunction looksLikeJoin(old, start, end, $newStart, $newEnd) {\n  if (!$newStart.parent.isTextblock ||\n      // The content must have shrunk\n      end - start <= $newEnd.pos - $newStart.pos ||\n      // newEnd must point directly at or after the end of the block that newStart points into\n      skipClosingAndOpening($newStart, true, false) < $newEnd.pos)\n    return false\n\n  let $start = old.resolve(start)\n  // Start must be at the end of a block\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)\n    return false\n  let $next = old.resolve(skipClosingAndOpening($start, true, true))\n  // The next textblock must start before end and end near it\n  if (!$next.parent.isTextblock || $next.pos > end ||\n      skipClosingAndOpening($next, true, false) < end)\n    return false\n\n  // The fragments after the join point must match\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content)\n}\n\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--\n    end++\n    fromEnd = false\n  }\n  if (mayOpen) {\n    let next = $pos.node(depth).maybeChild($pos.indexAfter(depth))\n    while (next && !next.isLeaf) {\n      next = next.firstChild\n      end++\n    }\n  }\n  return end\n}\n\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  let start = a.findDiffStart(b, pos)\n  if (start == null) return null\n  let {a: endA, b: endB} = a.findDiffEnd(b, pos + a.size, pos + b.size)\n  if (preferredSide == \"end\") {\n    let adjust = Math.max(0, start - Math.min(endA, endB))\n    preferredPos -= endA + adjust - start\n  }\n  if (endA < start && a.size < b.size) {\n    let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0\n    start -= move\n    endB = start + (endB - endA)\n    endA = start\n  } else if (endB < start) {\n    let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0\n    start -= move\n    endA = start + (endA - endB)\n    endB = start\n  }\n  return {start, endA, endB}\n}\n","import {Slice, Fragment, DOMParser, DOMSerializer} from \"prosemirror-model\"\n\nexport function serializeForClipboard(view, slice) {\n  let context = [], {content, openStart, openEnd} = slice\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--\n    openEnd--\n    let node = content.firstChild\n    context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null)\n    content = node.content\n  }\n\n  let serializer = view.someProp(\"clipboardSerializer\") || DOMSerializer.fromSchema(view.state.schema)\n  let doc = detachedDoc(), wrap = doc.createElement(\"div\")\n  wrap.appendChild(serializer.serializeFragment(content, {document: doc}))\n\n  let firstChild = wrap.firstChild, needsWrap\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      let wrapper = doc.createElement(needsWrap[i])\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType == 1)\n    firstChild.setAttribute(\"data-pm-slice\", `${openStart} ${openEnd} ${JSON.stringify(context)}`)\n\n  let text = view.someProp(\"clipboardTextSerializer\", f => f(slice)) ||\n      slice.content.textBetween(0, slice.content.size, \"\\n\\n\")\n\n  return {dom: wrap, text}\n}\n\n// : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice\n// Read a slice of content from the clipboard (or drop data).\nexport function parseFromClipboard(view, text, html, plainText, $context) {\n  let dom, inCode = $context.parent.type.spec.code, slice\n  if (!html && !text) return null\n  let asText = text && (plainText || inCode || !html)\n  if (asText) {\n    view.someProp(\"transformPastedText\", f => { text = f(text, inCode || plainText) })\n    if (inCode) return new Slice(Fragment.from(view.state.schema.text(text.replace(/\\r\\n?/g, \"\\n\"))), 0, 0)\n    let parsed = view.someProp(\"clipboardTextParser\", f => f(text, $context, plainText))\n    if (parsed) {\n      slice = parsed\n    } else {\n      dom = document.createElement(\"div\")\n      text.trim().split(/(?:\\r\\n?|\\n)+/).forEach(block => {\n        dom.appendChild(document.createElement(\"p\")).textContent = block\n      })\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", f => { html = f(html) })\n    dom = readHTML(html)\n  }\n\n  let contextNode = dom && dom.querySelector(\"[data-pm-slice]\")\n  let sliceData = contextNode && /^(\\d+) (\\d+) (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\"))\n  if (!slice) {\n    let parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n    slice = parser.parseSlice(dom, {preserveWhitespace: !!(asText || sliceData), context: $context})\n  }\n  if (sliceData)\n    slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[3])\n  else // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), false)\n\n  view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  return slice\n}\n\n// Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) return fragment\n  for (let d = $context.depth; d >= 0; d--) {\n    let parent = $context.node(d)\n    let match = parent.contentMatchAt($context.index(d))\n    let lastWrap, result = []\n    fragment.forEach(node => {\n      if (!result) return\n      let wrap = match.findWrapping(node.type), inLast\n      if (!wrap) return result = null\n      if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n        result[result.length - 1] = inLast\n      } else {\n        if (result.length) result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length)\n        let wrapped = withWrappers(node, wrap)\n        result.push(wrapped)\n        match = match.matchType(wrapped.type, wrapped.attrs)\n        lastWrap = wrap\n      }\n    })\n    if (result) return Fragment.from(result)\n  }\n  return fragment\n}\n\nfunction withWrappers(node, wrap, from = 0) {\n  for (let i = wrap.length - 1; i >= from; i--)\n    node = wrap[i].create(null, Fragment.from(node))\n  return node\n}\n\n// Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1)\n    if (inner) return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner))\n    let match = sibling.contentMatchAt(sibling.childCount)\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))\n      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))))\n  }\n}\n\nfunction closeRight(node, depth) {\n  if (depth == 0) return node\n  let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1))\n  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)\n  return node.copy(fragment.append(fill))\n}\n\nfunction closeRange(fragment, side, from, to, depth, openEnd) {\n  let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content\n  if (depth < to - 1) inner = closeRange(inner, side, from, to, depth + 1, openEnd)\n  if (depth >= from)\n    inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)\n      : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true))\n  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner))\n}\n\nfunction closeSlice(slice, openStart, openEnd) {\n  if (openStart < slice.openStart)\n    slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd)\n  if (openEnd < slice.openEnd)\n    slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd)\n  return slice\n}\n\n// Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\nconst wrapMap = {\n  thead: [\"table\"],\n  tbody: [\"table\"],\n  tfoot: [\"table\"],\n  caption: [\"table\"],\n  colgroup: [\"table\"],\n  col: [\"table\", \"colgroup\"],\n  tr: [\"table\", \"tbody\"],\n  td: [\"table\", \"tbody\", \"tr\"],\n  th: [\"table\", \"tbody\", \"tr\"]\n}\n\nlet _detachedDoc = null\nfunction detachedDoc() {\n  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument(\"title\"))\n}\n\nfunction readHTML(html) {\n  let metas = /^(\\s*<meta [^>]*>)*/.exec(html)\n  if (metas) html = html.slice(metas[0].length)\n  let elt = detachedDoc().createElement(\"div\")\n  let firstTag = /<([a-z][^>\\s]+)/i.exec(html), wrap\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])\n    html = wrap.map(n => \"<\" + n + \">\").join(\"\") + html + wrap.map(n => \"</\" + n + \">\").reverse().join(\"\")\n  elt.innerHTML = html\n  if (wrap) for (let i = 0; i < wrap.length; i++) elt = elt.querySelector(wrap[i]) || elt\n  return elt\n}\n\nfunction addContext(slice, context) {\n  if (!slice.size) return slice\n  let schema = slice.content.firstChild.type.schema, array\n  try { array = JSON.parse(context) }\n  catch(e) { return slice }\n  let {content, openStart, openEnd} = slice\n  for (let i = array.length - 2; i >= 0; i -= 2) {\n    let type = schema.nodes[array[i]]\n    if (!type || type.hasRequiredAttrs()) break\n    content = Fragment.from(type.create(array[i + 1], content))\n    openStart++; openEnd++\n  }\n  return new Slice(content, openStart, openEnd)\n}\n","import browser from \"./browser\"\nimport {domIndex, isEquivalentPosition} from \"./dom\"\nimport {hasFocusAndSelection, hasSelection, selectionToDOM} from \"./selection\"\n\nconst observeOptions = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  attributes: true,\n  attributeOldValue: true,\n  subtree: true\n}\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nconst useCharData = browser.ie && browser.ie_version <= 11\n\nclass SelectionState {\n  constructor() {\n    this.anchorNode = this.anchorOffset = this.focusNode = this.focusOffset = null\n  }\n\n  set(sel) {\n    this.anchorNode = sel.anchorNode; this.anchorOffset = sel.anchorOffset\n    this.focusNode = sel.focusNode; this.focusOffset = sel.focusOffset\n  }\n\n  eq(sel) {\n    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&\n      sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset\n  }\n}\n\nexport class DOMObserver {\n  constructor(view, handleDOMChange) {\n    this.view = view\n    this.handleDOMChange = handleDOMChange\n    this.queue = []\n    this.flushingSoon = -1\n    this.observer = window.MutationObserver &&\n      new window.MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) this.queue.push(mutations[i])\n        // IE11 will sometimes (on backspacing out a single character\n        // text node after a BR node) call the observer callback\n        // before actually updating the DOM, which will cause\n        // ProseMirror to miss the change (see #930)\n        if (browser.ie && browser.ie_version <= 11 && mutations.some(\n          m => m.type == \"childList\" && m.removedNodes.length ||\n               m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\n          this.flushSoon()\n        else\n          this.flush()\n      })\n    this.currentSelection = new SelectionState\n    if (useCharData) {\n      this.onCharData = e => {\n        this.queue.push({target: e.target, type: \"characterData\", oldValue: e.prevValue})\n        this.flushSoon()\n      }\n    }\n    this.onSelectionChange = this.onSelectionChange.bind(this)\n    this.suppressingSelectionUpdates = false\n  }\n\n  flushSoon() {\n    if (this.flushingSoon < 0)\n      this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush() }, 20)\n  }\n\n  forceFlush() {\n    if (this.flushingSoon > -1) {\n      window.clearTimeout(this.flushingSoon)\n      this.flushingSoon = -1\n      this.flush()\n    }\n  }\n\n  start() {\n    if (this.observer)\n      this.observer.observe(this.view.dom, observeOptions)\n    if (useCharData)\n      this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.connectSelection()\n  }\n\n  stop() {\n    if (this.observer) {\n      let take = this.observer.takeRecords()\n      if (take.length) {\n        for (let i = 0; i < take.length; i++) this.queue.push(take[i])\n        window.setTimeout(() => this.flush(), 20)\n      }\n      this.observer.disconnect()\n    }\n    if (useCharData) this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.disconnectSelection()\n  }\n\n  connectSelection() {\n    this.view.dom.ownerDocument.addEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  disconnectSelection() {\n    this.view.dom.ownerDocument.removeEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  suppressSelectionUpdates() {\n    this.suppressingSelectionUpdates = true\n    setTimeout(() => this.suppressingSelectionUpdates = false, 50)\n  }\n\n  onSelectionChange() {\n    if (!hasFocusAndSelection(this.view)) return\n    if (this.suppressingSelectionUpdates) return selectionToDOM(this.view)\n    // Deletions on IE11 fire their events in the wrong order, giving\n    // us a selection change event before the DOM changes are\n    // reported.\n    if (browser.ie && browser.ie_version <= 11 && !this.view.state.selection.empty) {\n      let sel = this.view.root.getSelection()\n      // Selection.isCollapsed isn't reliable on IE\n      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\n        return this.flushSoon()\n    }\n    this.flush()\n  }\n\n  setCurSelection() {\n    this.currentSelection.set(this.view.root.getSelection())\n  }\n\n  ignoreSelectionChange(sel) {\n    if (sel.rangeCount == 0) return true\n    let container = sel.getRangeAt(0).commonAncestorContainer\n    let desc = this.view.docView.nearestDesc(container)\n    if (desc && desc.ignoreMutation({type: \"selection\", target: container.nodeType == 3 ? container.parentNode : container})) {\n      this.setCurSelection()\n      return true\n    }\n  }\n\n  flush() {\n    if (!this.view.docView || this.flushingSoon > -1) return\n    let mutations = this.observer ? this.observer.takeRecords() : []\n    if (this.queue.length) {\n      mutations = this.queue.concat(mutations)\n      this.queue.length = 0\n    }\n\n    let sel = this.view.root.getSelection()\n    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasSelection(this.view) && !this.ignoreSelectionChange(sel)\n\n    let from = -1, to = -1, typeOver = false, added = []\n    if (this.view.editable) {\n      for (let i = 0; i < mutations.length; i++) {\n        let result = this.registerMutation(mutations[i], added)\n        if (result) {\n          from = from < 0 ? result.from : Math.min(result.from, from)\n          to = to < 0 ? result.to : Math.max(result.to, to)\n          if (result.typeOver) typeOver = true\n        }\n      }\n    }\n\n    if (browser.gecko && added.length > 1) {\n      let brs = added.filter(n => n.nodeName == \"BR\")\n      if (brs.length == 2) {\n        let [a, b] = brs\n        if (a.parentNode && a.parentNode.parentNode == b.parentNode) b.remove()\n        else a.remove()\n      }\n    }\n\n    if (from > -1 || newSel) {\n      if (from > -1) {\n        this.view.docView.markDirty(from, to)\n        checkCSS(this.view)\n      }\n      this.handleDOMChange(from, to, typeOver, added)\n      if (this.view.docView.dirty) this.view.updateState(this.view.state)\n      else if (!this.currentSelection.eq(sel)) selectionToDOM(this.view)\n      this.currentSelection.set(sel)\n    }\n  }\n\n  registerMutation(mut, added) {\n    // Ignore mutations inside nodes that were already noted as inserted\n    if (added.indexOf(mut.target) > -1) return null\n    let desc = this.view.docView.nearestDesc(mut.target)\n    if (mut.type == \"attributes\" &&\n        (desc == this.view.docView || mut.attributeName == \"contenteditable\" ||\n         // Firefox sometimes fires spurious events for null/empty styles\n         (mut.attributeName == \"style\" && !mut.oldValue && !mut.target.getAttribute(\"style\"))))\n      return null\n    if (!desc || desc.ignoreMutation(mut)) return null\n\n    if (mut.type == \"childList\") {\n      for (let i = 0; i < mut.addedNodes.length; i++) added.push(mut.addedNodes[i])\n      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))\n        return {from: desc.posBefore, to: desc.posAfter}\n      let prev = mut.previousSibling, next = mut.nextSibling\n      if (browser.ie && browser.ie_version <= 11 && mut.addedNodes.length) {\n        // IE11 gives us incorrect next/prev siblings for some\n        // insertions, so if there are added nodes, recompute those\n        for (let i = 0; i < mut.addedNodes.length; i++) {\n          let {previousSibling, nextSibling} = mut.addedNodes[i]\n          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0) prev = previousSibling\n          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0) next = nextSibling\n        }\n      }\n      let fromOffset = prev && prev.parentNode == mut.target\n          ? domIndex(prev) + 1 : 0\n      let from = desc.localPosFromDOM(mut.target, fromOffset, -1)\n      let toOffset = next && next.parentNode == mut.target\n          ? domIndex(next) : mut.target.childNodes.length\n      let to = desc.localPosFromDOM(mut.target, toOffset, 1)\n      return {from, to}\n    } else if (mut.type == \"attributes\") {\n      return {from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border}\n    } else { // \"characterData\"\n      return {\n        from: desc.posAtStart,\n        to: desc.posAtEnd,\n        // An event was generated for a text change that didn't change\n        // any text. Mark the dom change to fall back to assuming the\n        // selection was typed over with an identical value if it can't\n        // find another change.\n        typeOver: mut.target.nodeValue == mut.oldValue\n      }\n    }\n  }\n}\n\nlet cssChecked = false\n\nfunction checkCSS(view) {\n  if (cssChecked) return\n  cssChecked = true\n  if (getComputedStyle(view.dom).whiteSpace == \"normal\")\n    console[\"warn\"](\"ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.\")\n}\n","import {Selection, NodeSelection, TextSelection} from \"prosemirror-state\"\nimport {dropPoint} from \"prosemirror-transform\"\nimport {Slice} from \"prosemirror-model\"\n\nimport browser from \"./browser\"\nimport {captureKeyDown} from \"./capturekeys\"\nimport {readDOMChange} from \"./domchange\"\nimport {parseFromClipboard, serializeForClipboard} from \"./clipboard\"\nimport {DOMObserver} from \"./domobserver\"\nimport {selectionBetween, selectionToDOM, selectionFromDOM} from \"./selection\"\nimport {keyEvent} from \"./dom\"\n\n// A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\nconst handlers = {}, editHandlers = {}\n\nexport function initInput(view) {\n  view.shiftKey = false\n  view.mouseDown = null\n  view.lastKeyCode = null\n  view.lastKeyCodeTime = 0\n  view.lastClick = {time: 0, x: 0, y: 0, type: \"\"}\n  view.lastSelectionOrigin = null\n  view.lastSelectionTime = 0\n\n  view.lastIOSEnter = 0\n  view.lastIOSEnterFallbackTimeout = null\n  view.lastAndroidDelete = 0\n\n  view.composing = false\n  view.composingTimeout = null\n  view.compositionNodes = []\n  view.compositionEndedAt = -2e8\n\n  view.domObserver = new DOMObserver(view, (from, to, typeOver, added) => readDOMChange(view, from, to, typeOver, added))\n  view.domObserver.start()\n  // Used by hacks like the beforeinput handler to check whether anything happened in the DOM\n  view.domChangeCount = 0\n\n  view.eventHandlers = Object.create(null)\n  for (let event in handlers) {\n    let handler = handlers[event]\n    view.dom.addEventListener(event, view.eventHandlers[event] = event => {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&\n          (view.editable || !(event.type in editHandlers)))\n        handler(view, event)\n    })\n  }\n  // On Safari, for reasons beyond my understanding, adding an input\n  // event handler makes an issue where the composition vanishes when\n  // you press enter go away.\n  if (browser.safari) view.dom.addEventListener(\"input\", () => null)\n\n  ensureListeners(view)\n}\n\nfunction setSelectionOrigin(view, origin) {\n  view.lastSelectionOrigin = origin\n  view.lastSelectionTime = Date.now()\n}\n\nexport function destroyInput(view) {\n  view.domObserver.stop()\n  for (let type in view.eventHandlers)\n    view.dom.removeEventListener(type, view.eventHandlers[type])\n  clearTimeout(view.composingTimeout)\n  clearTimeout(view.lastIOSEnterFallbackTimeout)\n}\n\nexport function ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", currentHandlers => {\n    for (let type in currentHandlers) if (!view.eventHandlers[type])\n      view.dom.addEventListener(type, view.eventHandlers[type] = event => runCustomHandler(view, event))\n  })\n}\n\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", handlers => {\n    let handler = handlers[event.type]\n    return handler ? handler(view, event) || event.defaultPrevented : false\n  })\n}\n\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) return true\n  if (event.defaultPrevented) return false\n  for (let node = event.target; node != view.dom; node = node.parentNode)\n    if (!node || node.nodeType == 11 ||\n        (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))\n      return false\n  return true\n}\n\nexport function dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] &&\n      (view.editable || !(event.type in editHandlers)))\n    handlers[event.type](view, event)\n}\n\neditHandlers.keydown = (view, event) => {\n  view.shiftKey = event.keyCode == 16 || event.shiftKey\n  if (inOrNearComposition(view, event)) return\n  if (event.keyCode != 229) view.domObserver.forceFlush()\n  view.lastKeyCode = event.keyCode\n  view.lastKeyCodeTime = Date.now()\n  // On iOS, if we preventDefault enter key presses, the virtual\n  // keyboard gets confused. So the hack here is to set a flag that\n  // makes the DOM change code recognize that what just happens should\n  // be replaced by whatever the Enter key handlers do.\n  if (browser.ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {\n    let now = Date.now()\n    view.lastIOSEnter = now\n    view.lastIOSEnterFallbackTimeout = setTimeout(() => {\n      if (view.lastIOSEnter == now) {\n        view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))\n        view.lastIOSEnter = 0\n      }\n    }, 200)\n  } else if (view.someProp(\"handleKeyDown\", f => f(view, event)) || captureKeyDown(view, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"key\")\n  }\n}\n\neditHandlers.keyup = (view, e) => {\n  if (e.keyCode == 16) view.shiftKey = false\n}\n\neditHandlers.keypress = (view, event) => {\n  if (inOrNearComposition(view, event) || !event.charCode ||\n      event.ctrlKey && !event.altKey || browser.mac && event.metaKey) return\n\n  if (view.someProp(\"handleKeyPress\", f => f(view, event))) {\n    event.preventDefault()\n    return\n  }\n\n  let sel = view.state.selection\n  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    let text = String.fromCharCode(event.charCode)\n    if (!view.someProp(\"handleTextInput\", f => f(view, sel.$from.pos, sel.$to.pos, text)))\n      view.dispatch(view.state.tr.insertText(text).scrollIntoView())\n    event.preventDefault()\n  }\n}\n\nfunction eventCoords(event) { return {left: event.clientX, top: event.clientY} }\n\nfunction isNear(event, click) {\n  let dx = click.x - event.clientX, dy = click.y - event.clientY\n  return dx * dx + dy * dy < 100\n}\n\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)\n                                                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))\n      return true\n  }\n  return false\n}\n\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) view.focus()\n  let tr = view.state.tr.setSelection(selection)\n  if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n  view.dispatch(tr)\n}\n\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter\n  if (node && node.isAtom && NodeSelection.isSelectable(node)) {\n    updateSelection(view, new NodeSelection($pos), \"pointer\")\n    return true\n  }\n  return false\n}\n\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) return false\n  let sel = view.state.selection, selectedNode, selectAt\n  if (sel instanceof NodeSelection) selectedNode = sel.node\n\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    if (NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 &&\n          i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)\n        selectAt = $pos.before(sel.$from.depth)\n      else\n        selectAt = $pos.before(i)\n      break\n    }\n  }\n\n  if (selectAt != null) {\n    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), \"pointer\")\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleClick\", f => f(view, pos, event)) ||\n    (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside))\n}\n\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleDoubleClick\", f => f(view, pos, event))\n}\n\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleTripleClick\", f => f(view, pos, event)) ||\n    defaultTripleClick(view, inside, event)\n}\n\nfunction defaultTripleClick(view, inside, event) {\n  if (event.button != 0) return false\n  let doc = view.state.doc\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, TextSelection.create(doc, 0, doc.content.size), \"pointer\")\n      return true\n    }\n    return false\n  }\n\n  let $pos = doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    let nodePos = $pos.before(i)\n    if (node.inlineContent)\n      updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\")\n    else if (NodeSelection.isSelectable(node))\n      updateSelection(view, NodeSelection.create(doc, nodePos), \"pointer\")\n    else\n      continue\n    return true\n  }\n}\n\nfunction forceDOMFlush(view) {\n  return endComposition(view)\n}\n\nconst selectNodeModifier = browser.mac ? \"metaKey\" : \"ctrlKey\"\n\nhandlers.mousedown = (view, event) => {\n  view.shiftKey = event.shiftKey\n  let flushed = forceDOMFlush(view)\n  let now = Date.now(), type = \"singleClick\"\n  if (now - view.lastClick.time < 500 && isNear(event, view.lastClick) && !event[selectNodeModifier]) {\n    if (view.lastClick.type == \"singleClick\") type = \"doubleClick\"\n    else if (view.lastClick.type == \"doubleClick\") type = \"tripleClick\"\n  }\n  view.lastClick = {time: now, x: event.clientX, y: event.clientY, type}\n\n  let pos = view.posAtCoords(eventCoords(event))\n  if (!pos) return\n\n  if (type == \"singleClick\") {\n    if (view.mouseDown) view.mouseDown.done()\n    view.mouseDown = new MouseDown(view, pos, event, flushed)\n  } else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"pointer\")\n  }\n}\n\nclass MouseDown {\n  constructor(view, pos, event, flushed) {\n    this.view = view\n    this.startDoc = view.state.doc\n    this.pos = pos\n    this.event = event\n    this.flushed = flushed\n    this.selectNode = event[selectNodeModifier]\n    this.allowDefault = event.shiftKey || event.button != 0\n\n    let targetNode, targetPos\n    if (pos.inside > -1) {\n      targetNode = view.state.doc.nodeAt(pos.inside)\n      targetPos = pos.inside\n    } else {\n      let $pos = view.state.doc.resolve(pos.pos)\n      targetNode = $pos.parent\n      targetPos = $pos.depth ? $pos.before() : 0\n    }\n\n    this.mightDrag = null\n\n    const target = flushed ? null : event.target\n    const targetDesc = target ? view.docView.nearestDesc(target, true) : null\n    this.target = targetDesc ? targetDesc.dom : null\n\n    let {selection} = view.state\n    if (event.button == 0 &&\n        targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||\n        selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)\n      this.mightDrag = {node: targetNode,\n                        pos: targetPos,\n                        addAttr: this.target && !this.target.draggable,\n                        setUneditable: this.target && browser.gecko && !this.target.hasAttribute(\"contentEditable\")}\n\n    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.draggable = true\n      if (this.mightDrag.setUneditable)\n        setTimeout(() => {\n          if (this.view.mouseDown == this) this.target.setAttribute(\"contentEditable\", \"false\")\n        }, 20)\n      this.view.domObserver.start()\n    }\n\n    view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this))\n    view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this))\n    setSelectionOrigin(view, \"pointer\")\n  }\n\n  done() {\n    this.view.root.removeEventListener(\"mouseup\", this.up)\n    this.view.root.removeEventListener(\"mousemove\", this.move)\n    if (this.mightDrag && this.target) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.removeAttribute(\"draggable\")\n      if (this.mightDrag.setUneditable) this.target.removeAttribute(\"contentEditable\")\n      this.view.domObserver.start()\n    }\n    this.view.mouseDown = null\n  }\n\n  up(event) {\n    this.done()\n\n    if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target))\n      return\n\n    let pos = this.pos\n    if (this.view.state.doc != this.startDoc) pos = this.view.posAtCoords(eventCoords(event))\n\n    if (this.allowDefault || !pos) {\n      setSelectionOrigin(this.view, \"pointer\")\n    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {\n      event.preventDefault()\n    } else if (this.flushed ||\n               // Safari ignores clicks on draggable elements\n               (browser.safari && this.mightDrag && !this.mightDrag.node.isAtom) ||\n               // Chrome will sometimes treat a node selection as a\n               // cursor, but still report that the node is selected\n               // when asked through getSelection. You'll then get a\n               // situation where clicking at the point where that\n               // (hidden) cursor is doesn't change the selection, and\n               // thus doesn't get a reaction from ProseMirror. This\n               // works around that.\n               (browser.chrome && !(this.view.state.selection instanceof TextSelection) &&\n                Math.min(Math.abs(pos.pos - this.view.state.selection.from),\n                         Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {\n      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), \"pointer\")\n      event.preventDefault()\n    } else {\n      setSelectionOrigin(this.view, \"pointer\")\n    }\n  }\n\n  move(event) {\n    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||\n                               Math.abs(this.event.y - event.clientY) > 4))\n      this.allowDefault = true\n    setSelectionOrigin(this.view, \"pointer\")\n    if (event.buttons == 0) this.done()\n  }\n}\n\nhandlers.touchdown = view => {\n  forceDOMFlush(view)\n  setSelectionOrigin(view, \"pointer\")\n}\n\nhandlers.contextmenu = view => forceDOMFlush(view)\n\nfunction inOrNearComposition(view, event) {\n  if (view.composing) return true\n  // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n  // On Japanese input method editors (IMEs), the Enter key is used to confirm character\n  // selection. On Safari, when Enter is pressed, compositionend and keydown events are\n  // emitted. The keydown event triggers newline insertion, which we don't want.\n  // This method returns true if the keydown event should be ignored.\n  // We only ignore it once, as pressing Enter a second time *should* insert a newline.\n  // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.\n  // This guards against the case where compositionend is triggered without the keyboard\n  // (e.g. character confirmation may be done with the mouse), and keydown is triggered\n  // afterwards- we wouldn't want to ignore the keydown event in this case.\n  if (browser.safari && Math.abs(event.timeStamp - view.compositionEndedAt) < 500) {\n    view.compositionEndedAt = -2e8\n    return true\n  }\n  return false\n}\n\n// Drop active composition after 5 seconds of inactivity on Android\nconst timeoutComposition = browser.android ? 5000 : -1\n\neditHandlers.compositionstart = editHandlers.compositionupdate = view => {\n  if (!view.composing) {\n    view.domObserver.flush()\n    let {state} = view, $pos = state.selection.$from\n    if (state.selection.empty &&\n        (state.storedMarks ||\n         (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {\n      // Need to wrap the cursor in mark nodes different from the ones in the DOM context\n      view.markCursor = view.state.storedMarks || $pos.marks()\n      endComposition(view, true)\n      view.markCursor = null\n    } else {\n      endComposition(view)\n      // In firefox, if the cursor is after but outside a marked node,\n      // the inserted text won't inherit the marks. So this moves it\n      // inside if necessary.\n      if (browser.gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {\n        let sel = view.root.getSelection()\n        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {\n          let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1]\n          if (!before) break\n          if (before.nodeType == 3) {\n            sel.collapse(before, before.nodeValue.length)\n            break\n          } else {\n            node = before\n            offset = -1\n          }\n        }\n      }\n    }\n    view.composing = true\n  }\n  scheduleComposeEnd(view, timeoutComposition)\n}\n\neditHandlers.compositionend = (view, event) => {\n  if (view.composing) {\n    view.composing = false\n    view.compositionEndedAt = event.timeStamp\n    scheduleComposeEnd(view, 20)\n  }\n}\n\nfunction scheduleComposeEnd(view, delay) {\n  clearTimeout(view.composingTimeout)\n  if (delay > -1) view.composingTimeout = setTimeout(() => endComposition(view), delay)\n}\n\nexport function clearComposition(view) {\n  view.composing = false\n  while (view.compositionNodes.length > 0) view.compositionNodes.pop().markParentsDirty()\n}\n\nexport function endComposition(view, forceUpdate) {\n  view.domObserver.forceFlush()\n  clearComposition(view)\n  if (forceUpdate || view.docView.dirty) {\n    let sel = selectionFromDOM(view)\n    if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n    else view.updateState(view.state)\n    return true\n  }\n  return false\n}\n\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  if (!view.dom.parentNode) return\n  let wrap = view.dom.parentNode.appendChild(document.createElement(\"div\"))\n  wrap.appendChild(dom)\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  let sel = getSelection(), range = document.createRange()\n  range.selectNodeContents(dom)\n  // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n  view.dom.blur()\n  sel.removeAllRanges()\n  sel.addRange(range)\n  setTimeout(() => {\n    if (wrap.parentNode) wrap.parentNode.removeChild(wrap)\n    view.focus()\n  }, 50)\n}\n\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n      (browser.ios && browser.webkit_version < 604)\n\nhandlers.copy = editHandlers.cut = (view, e) => {\n  let sel = view.state.selection, cut = e.type == \"cut\"\n  if (sel.empty) return\n\n  // IE and Edge's clipboard interface is completely broken\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  let slice = sel.content(), {dom, text} = serializeForClipboard(view, slice)\n  if (data) {\n    e.preventDefault()\n    data.clearData()\n    data.setData(\"text/html\", dom.innerHTML)\n    data.setData(\"text/plain\", text)\n  } else {\n    captureCopy(view, dom)\n  }\n  if (cut) view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"))\n}\n\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null\n}\n\nfunction capturePaste(view, e) {\n  if (!view.dom.parentNode) return\n  let plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code\n  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? \"textarea\" : \"div\"))\n  if (!plainText) target.contentEditable = \"true\"\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  target.focus()\n  setTimeout(() => {\n    view.focus()\n    if (target.parentNode) target.parentNode.removeChild(target)\n    if (plainText) doPaste(view, target.value, null, e)\n    else doPaste(view, target.textContent, target.innerHTML, e)\n  }, 50)\n}\n\nfunction doPaste(view, text, html, e) {\n  let slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from)\n  if (view.someProp(\"handlePaste\", f => f(view, e, slice || Slice.empty))) return true\n  if (!slice) return false\n\n  let singleNode = sliceSingleNode(slice)\n  let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice)\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"))\n  return true\n}\n\neditHandlers.paste = (view, e) => {\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  if (data && doPaste(view, data.getData(\"text/plain\"), data.getData(\"text/html\"), e)) e.preventDefault()\n  else capturePaste(view, e)\n}\n\nclass Dragging {\n  constructor(slice, move) {\n    this.slice = slice\n    this.move = move\n  }\n}\n\nconst dragCopyModifier = browser.mac ? \"altKey\" : \"ctrlKey\"\n\nhandlers.dragstart = (view, e) => {\n  let mouseDown = view.mouseDown\n  if (mouseDown) mouseDown.done()\n  if (!e.dataTransfer) return\n\n  let sel = view.state.selection\n  let pos = sel.empty ? null : view.posAtCoords(eventCoords(e))\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1: sel.to)) {\n    // In selection\n  } else if (mouseDown && mouseDown.mightDrag) {\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)))\n  } else if (e.target && e.target.nodeType == 1) {\n    let desc = view.docView.nearestDesc(e.target, true)\n    if (!desc || !desc.node.type.spec.draggable || desc == view.docView) return\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)))\n  }\n  let slice = view.state.selection.content(), {dom, text} = serializeForClipboard(view, slice)\n  e.dataTransfer.clearData()\n  e.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML)\n  // See https://github.com/ProseMirror/prosemirror/issues/1156\n  e.dataTransfer.effectAllowed = \"copyMove\"\n  if (!brokenClipboardAPI) e.dataTransfer.setData(\"text/plain\", text)\n  view.dragging = new Dragging(slice, !e[dragCopyModifier])\n}\n\nhandlers.dragend = view => {\n  let dragging = view.dragging\n  window.setTimeout(() => {\n    if (view.dragging == dragging)  view.dragging = null\n  }, 50)\n}\n\neditHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault()\n\neditHandlers.drop = (view, e) => {\n  let dragging = view.dragging\n  view.dragging = null\n\n  if (!e.dataTransfer) return\n\n  let eventPos = view.posAtCoords(eventCoords(e))\n  if (!eventPos) return\n  let $mouse = view.state.doc.resolve(eventPos.pos)\n  if (!$mouse) return\n  let slice = dragging && dragging.slice\n  if (slice) {\n    view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  } else {\n    slice = parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? \"Text\" : \"text/plain\"),\n                               brokenClipboardAPI ? null : e.dataTransfer.getData(\"text/html\"), false, $mouse)\n  }\n  let move = dragging && !e[dragCopyModifier]\n  if (view.someProp(\"handleDrop\", f => f(view, e, slice || Slice.empty, move))) {\n    e.preventDefault()\n    return\n  }\n  if (!slice) return\n\n  e.preventDefault()\n  let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos\n  if (insertPos == null) insertPos = $mouse.pos\n\n  let tr = view.state.tr\n  if (move) tr.deleteSelection()\n\n  let pos = tr.mapping.map(insertPos)\n  let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1\n  let beforeInsert = tr.doc\n  if (isNode)\n    tr.replaceRangeWith(pos, pos, slice.content.firstChild)\n  else\n    tr.replaceRange(pos, pos, slice)\n  if (tr.doc.eq(beforeInsert)) return\n\n  let $pos = tr.doc.resolve(pos)\n  if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&\n      $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {\n    tr.setSelection(new NodeSelection($pos))\n  } else {\n    let end = tr.mapping.map(insertPos)\n    tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo)\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)))\n  }\n  view.focus()\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"))\n}\n\nhandlers.focus = view => {\n  if (!view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.add(\"ProseMirror-focused\")\n    view.domObserver.start()\n    view.focused = true\n    setTimeout(() => {\n      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.root.getSelection()))\n        selectionToDOM(view)\n    }, 20)\n  }\n}\n\nhandlers.blur = view => {\n  if (view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.remove(\"ProseMirror-focused\")\n    view.domObserver.start()\n    view.domObserver.currentSelection.set({})\n    view.focused = false\n  }\n}\n\nhandlers.beforeinput = (view, event) => {\n  // We should probably do more with beforeinput events, but support\n  // is so spotty that I'm still waiting to see where they are going.\n\n  // Very specific hack to deal with backspace sometimes failing on\n  // Chrome Android when after an uneditable node.\n  if (browser.chrome && browser.android && event.inputType == \"deleteContentBackward\") {\n    let {domChangeCount} = view\n    setTimeout(() => {\n      if (view.domChangeCount != domChangeCount) return // Event already had some effect\n      // This bug tends to close the virtual keyboard, so we refocus\n      view.dom.blur()\n      view.focus()\n      if (view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) return\n      let {$cursor} = view.state.selection\n      // Crude approximation of backspace behavior when no command handled it\n      if ($cursor && $cursor.pos > 0) view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView())\n    }, 50)\n  }\n}\n\n// Make sure all handlers get registered\nfor (let prop in editHandlers) handlers[prop] = editHandlers[prop]\n","function compareObjs(a, b) {\n  if (a == b) return true\n  for (let p in a) if (a[p] !== b[p]) return false\n  for (let p in b) if (!(p in a)) return false\n  return true\n}\n\nclass WidgetType {\n  constructor(toDOM, spec) {\n    this.spec = spec || noSpec\n    this.side = this.spec.side || 0\n    this.toDOM = toDOM\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let {pos, deleted} = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1)\n    return deleted ? null : new Decoration(pos - offset, pos - offset, this)\n  }\n\n  valid() { return true }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof WidgetType &&\n       (this.spec.key && this.spec.key == other.spec.key ||\n        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)))\n  }\n}\n\nclass InlineType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset\n    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset\n    return from >= to ? null : new Decoration(from, to, this)\n  }\n\n  valid(_, span) { return span.from < span.to }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n\n  static is(span) { return span.type instanceof InlineType }\n}\n\nclass NodeType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.mapResult(span.from + oldOffset, 1)\n    if (from.deleted) return null\n    let to = mapping.mapResult(span.to + oldOffset, -1)\n    if (to.deleted || to.pos <= from.pos) return null\n    return new Decoration(from.pos - offset, to.pos - offset, this)\n  }\n\n  valid(node, span) {\n    let {index, offset} = node.content.findIndex(span.from)\n    return offset == span.from && offset + node.child(index).nodeSize == span.to\n  }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n}\n\n// ::- Decoration objects can be provided to the view through the\n// [`decorations` prop](#view.EditorProps.decorations). They come in\n// several variants—see the static members of this class for details.\nexport class Decoration {\n  constructor(from, to, type) {\n    // :: number\n    // The start position of the decoration.\n    this.from = from\n    // :: number\n    // The end position. Will be the same as `from` for [widget\n    // decorations](#view.Decoration^widget).\n    this.to = to\n    this.type = type\n  }\n\n  copy(from, to) {\n    return new Decoration(from, to, this.type)\n  }\n\n  eq(other, offset = 0) {\n    return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to\n  }\n\n  map(mapping, offset, oldOffset) {\n    return this.type.map(mapping, this, offset, oldOffset)\n  }\n\n  // :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration\n  // Creates a widget decoration, which is a DOM node that's shown in\n  // the document at the given position. It is recommended that you\n  // delay rendering the widget by passing a function that will be\n  // called when the widget is actually drawn in a view, but you can\n  // also directly pass a DOM node. `getPos` can be used to find the\n  // widget's current document position.\n  //\n  //   spec::- These options are supported:\n  //\n  //     side:: ?number\n  //     Controls which side of the document position this widget is\n  //     associated with. When negative, it is drawn before a cursor\n  //     at its position, and content inserted at that position ends\n  //     up after the widget. When zero (the default) or positive, the\n  //     widget is drawn after the cursor and content inserted there\n  //     ends up before the widget.\n  //\n  //     When there are multiple widgets at a given position, their\n  //     `side` values determine the order in which they appear. Those\n  //     with lower values appear first. The ordering of widgets with\n  //     the same `side` value is unspecified.\n  //\n  //     When `marks` is null, `side` also determines the marks that\n  //     the widget is wrapped in—those of the node before when\n  //     negative, those of the node after when positive.\n  //\n  //     marks:: ?[Mark]\n  //     The precise set of marks to draw around the widget.\n  //\n  //     stopEvent:: ?(event: dom.Event) → bool\n  //     Can be used to control which DOM events, when they bubble out\n  //     of this widget, the editor view should ignore.\n  //\n  //     ignoreSelection:: ?bool\n  //     When set (defaults to false), selection changes inside the\n  //     widget are ignored, and don't cause ProseMirror to try and\n  //     re-sync the selection with its selection state.\n  //\n  //     key:: ?string\n  //     When comparing decorations of this type (in order to decide\n  //     whether it needs to be redrawn), ProseMirror will by default\n  //     compare the widget DOM node by identity. If you pass a key,\n  //     that key will be compared instead, which can be useful when\n  //     you generate decorations on the fly and don't want to store\n  //     and reuse DOM nodes. Make sure that any widgets with the same\n  //     key are interchangeable—if widgets differ in, for example,\n  //     the behavior of some event handler, they should get\n  //     different keys.\n  static widget(pos, toDOM, spec) {\n    return new Decoration(pos, pos, new WidgetType(toDOM, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) → Decoration\n  // Creates an inline decoration, which adds the given attributes to\n  // each inline node between `from` and `to`.\n  //\n  //   spec::- These options are recognized:\n  //\n  //     inclusiveStart:: ?bool\n  //     Determines how the left side of the decoration is\n  //     [mapped](#transform.Position_Mapping) when content is\n  //     inserted directly at that position. By default, the decoration\n  //     won't include the new content, but you can set this to `true`\n  //     to make it inclusive.\n  //\n  //     inclusiveEnd:: ?bool\n  //     Determines how the right side of the decoration is mapped.\n  //     See\n  //     [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).\n  static inline(from, to, attrs, spec) {\n    return new Decoration(from, to, new InlineType(attrs, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) → Decoration\n  // Creates a node decoration. `from` and `to` should point precisely\n  // before and after a node in the document. That node, and only that\n  // node, will receive the given attributes.\n  //\n  //   spec::-\n  //\n  //   Optional information to store with the decoration. It\n  //   is also used when comparing decorators for equality.\n  static node(from, to, attrs, spec) {\n    return new Decoration(from, to, new NodeType(attrs, spec))\n  }\n\n  // :: Object\n  // The spec provided when creating this decoration. Can be useful\n  // if you've stored extra information in that object.\n  get spec() { return this.type.spec }\n\n  get inline() { return this.type instanceof InlineType }\n}\n\n// DecorationAttrs:: interface\n// A set of attributes to add to a decorated node. Most properties\n// simply directly correspond to DOM attributes of the same name,\n// which will be set to the property's value. These are exceptions:\n//\n//   class:: ?string\n//   A CSS class name or a space-separated set of class names to be\n//   _added_ to the classes that the node already had.\n//\n//   style:: ?string\n//   A string of CSS to be _added_ to the node's existing `style` property.\n//\n//   nodeName:: ?string\n//   When non-null, the target node is wrapped in a DOM element of\n//   this type (and the other attributes are applied to this element).\n\nconst none = [], noSpec = {}\n\n// :: class extends DecorationSource\n// A collection of [decorations](#view.Decoration), organized in\n// such a way that the drawing algorithm can efficiently use and\n// compare them. This is a persistent data structure—it is not\n// modified, updates create a new value.\nexport class DecorationSet {\n  constructor(local, children) {\n    this.local = local && local.length ? local : none\n    this.children = children && children.length ? children : none\n  }\n\n  // :: (Node, [Decoration]) → DecorationSet\n  // Create a set of decorations, using the structure of the given\n  // document.\n  static create(doc, decorations) {\n    return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty\n  }\n\n  // :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]\n  // Find all decorations in this set which touch the given range\n  // (including decorations that start or end directly at the\n  // boundaries) and match the given predicate on their spec. When\n  // `start` and `end` are omitted, all decorations in the set are\n  // considered. When `predicate` isn't given, all decorations are\n  // assumed to match.\n  find(start, end, predicate) {\n    let result = []\n    this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate)\n    return result\n  }\n\n  findInner(start, end, result, offset, predicate) {\n    for (let i = 0; i < this.local.length; i++) {\n      let span = this.local[i]\n      if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))\n        result.push(span.copy(span.from + offset, span.to + offset))\n    }\n    for (let i = 0; i < this.children.length; i += 3) {\n      if (this.children[i] < end && this.children[i + 1] > start) {\n        let childOff = this.children[i] + 1\n        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate)\n      }\n    }\n  }\n\n  // :: (Mapping, Node, ?Object) → DecorationSet\n  // Map the set of decorations in response to a change in the\n  // document.\n  //\n  //   options::- An optional set of options.\n  //\n  //     onRemove:: ?(decorationSpec: Object)\n  //     When given, this function will be called for each decoration\n  //     that gets dropped as a result of the mapping, passing the\n  //     spec of that decoration.\n  map(mapping, doc, options) {\n    if (this == empty || mapping.maps.length == 0) return this\n    return this.mapInner(mapping, doc, 0, 0, options || noSpec)\n  }\n\n  mapInner(mapping, node, offset, oldOffset, options) {\n    let newLocal\n    for (let i = 0; i < this.local.length; i++) {\n      let mapped = this.local[i].map(mapping, offset, oldOffset)\n      if (mapped && mapped.type.valid(node, mapped)) (newLocal || (newLocal = [])).push(mapped)\n      else if (options.onRemove) options.onRemove(this.local[i].spec)\n    }\n\n    if (this.children.length)\n      return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options)\n    else\n      return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty\n  }\n\n  // :: (Node, [Decoration]) → DecorationSet\n  // Add the given array of decorations to the ones in the set,\n  // producing a new set. Needs access to the current document to\n  // create the appropriate tree structure.\n  add(doc, decorations) {\n    if (!decorations.length) return this\n    if (this == empty) return DecorationSet.create(doc, decorations)\n    return this.addInner(doc, decorations, 0)\n  }\n\n  addInner(doc, decorations, offset) {\n    let children, childIndex = 0\n    doc.forEach((childNode, childOffset) => {\n      let baseOffset = childOffset + offset, found\n      if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) return\n\n      if (!children) children = this.children.slice()\n      while (childIndex < children.length && children[childIndex] < childOffset) childIndex += 3\n      if (children[childIndex] == childOffset)\n        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1)\n      else\n        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec))\n      childIndex += 3\n    })\n\n    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset)\n    for (let i = 0; i < local.length; i++) if (!local[i].type.valid(doc, local[i])) local.splice(i--, 1)\n\n    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local,\n                             children || this.children)\n  }\n\n  // :: ([Decoration]) → DecorationSet\n  // Create a new set that contains the decorations in this set, minus\n  // the ones in the given array.\n  remove(decorations) {\n    if (decorations.length == 0 || this == empty) return this\n    return this.removeInner(decorations, 0)\n  }\n\n  removeInner(decorations, offset) {\n    let children = this.children, local = this.local\n    for (let i = 0; i < children.length; i += 3) {\n      let found, from = children[i] + offset, to = children[i + 1] + offset\n      for (let j = 0, span; j < decorations.length; j++) if (span = decorations[j]) {\n        if (span.from > from && span.to < to) {\n          decorations[j] = null\n          ;(found || (found = [])).push(span)\n        }\n      }\n      if (!found) continue\n      if (children == this.children) children = this.children.slice()\n      let removed = children[i + 2].removeInner(found, from + 1)\n      if (removed != empty) {\n        children[i + 2] = removed\n      } else {\n        children.splice(i, 3)\n        i -= 3\n      }\n    }\n    if (local.length) for (let i = 0, span; i < decorations.length; i++) if (span = decorations[i]) {\n      for (let j = 0; j < local.length; j++) if (local[j].eq(span, offset)) {\n        if (local == this.local) local = this.local.slice()\n        local.splice(j--, 1)\n      }\n    }\n    if (children == this.children && local == this.local) return this\n    return local.length || children.length ? new DecorationSet(local, children) : empty\n  }\n\n  forChild(offset, node) {\n    if (this == empty) return this\n    if (node.isLeaf) return DecorationSet.empty\n\n    let child, local\n    for (let i = 0; i < this.children.length; i += 3) if (this.children[i] >= offset) {\n      if (this.children[i] == offset) child = this.children[i + 2]\n      break\n    }\n    let start = offset + 1, end = start + node.content.size\n    for (let i = 0; i < this.local.length; i++) {\n      let dec = this.local[i]\n      if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {\n        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start\n        if (from < to) (local || (local = [])).push(dec.copy(from, to))\n      }\n    }\n    if (local) {\n      let localSet = new DecorationSet(local.sort(byPos))\n      return child ? new DecorationGroup([localSet, child]) : localSet\n    }\n    return child || empty\n  }\n\n  eq(other) {\n    if (this == other) return true\n    if (!(other instanceof DecorationSet) ||\n        this.local.length != other.local.length ||\n        this.children.length != other.children.length) return false\n    for (let i = 0; i < this.local.length; i++)\n      if (!this.local[i].eq(other.local[i])) return false\n    for (let i = 0; i < this.children.length; i += 3)\n      if (this.children[i] != other.children[i] ||\n          this.children[i + 1] != other.children[i + 1] ||\n          !this.children[i + 2].eq(other.children[i + 2])) return false\n    return true\n  }\n\n  locals(node) {\n    return removeOverlap(this.localsInner(node))\n  }\n\n  localsInner(node) {\n    if (this == empty) return none\n    if (node.inlineContent || !this.local.some(InlineType.is)) return this.local\n    let result = []\n    for (let i = 0; i < this.local.length; i++) {\n      if (!(this.local[i].type instanceof InlineType))\n        result.push(this.local[i])\n    }\n    return result\n  }\n}\n\n// DecorationSource:: interface\n// An object that can [provide](#view.EditorProps.decorations)\n// decorations. Implemented by [`DecorationSet`](#view.DecorationSet),\n// and passed to [node views](#view.EditorProps.nodeViews).\n\nconst empty = new DecorationSet()\n\n// :: DecorationSet\n// The empty set of decorations.\nDecorationSet.empty = empty\n\nDecorationSet.removeOverlap = removeOverlap\n\n// :- An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\nclass DecorationGroup {\n  constructor(members) {\n    this.members = members\n  }\n\n  forChild(offset, child) {\n    if (child.isLeaf) return DecorationSet.empty\n    let found = []\n    for (let i = 0; i < this.members.length; i++) {\n      let result = this.members[i].forChild(offset, child)\n      if (result == empty) continue\n      if (result instanceof DecorationGroup) found = found.concat(result.members)\n      else found.push(result)\n    }\n    return DecorationGroup.from(found)\n  }\n\n  eq(other) {\n    if (!(other instanceof DecorationGroup) ||\n        other.members.length != this.members.length) return false\n    for (let i = 0; i < this.members.length; i++)\n      if (!this.members[i].eq(other.members[i])) return false\n    return true\n  }\n\n  locals(node) {\n    let result, sorted = true\n    for (let i = 0; i < this.members.length; i++) {\n      let locals = this.members[i].localsInner(node)\n      if (!locals.length) continue\n      if (!result) {\n        result = locals\n      } else {\n        if (sorted) {\n          result = result.slice()\n          sorted = false\n        }\n        for (let j = 0; j < locals.length; j++) result.push(locals[j])\n      }\n    }\n    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none\n  }\n\n  // : ([DecorationSet]) → union<DecorationSet, DecorationGroup>\n  // Create a group for the given array of decoration sets, or return\n  // a single set when possible.\n  static from(members) {\n    switch (members.length) {\n      case 0: return empty\n      case 1: return members[0]\n      default: return new DecorationGroup(members)\n    }\n  }\n}\n\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  let children = oldChildren.slice()\n\n  // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n  let shift = (oldStart, oldEnd, newStart, newEnd) => {\n    for (let i = 0; i < children.length; i += 3) {\n      let end = children[i + 1], dSize\n      if (end == -1 || oldStart > end + oldOffset) continue\n      if (oldEnd >= children[i] + oldOffset) {\n        children[i + 1] = -1\n      } else if (newStart >= offset && (dSize = (newEnd - newStart) - (oldEnd - oldStart))) {\n        children[i] += dSize\n        children[i + 1] += dSize\n      }\n    }\n  }\n  for (let i = 0; i < mapping.maps.length; i++) mapping.maps[i].forEach(shift)\n\n  // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n  let mustRebuild = false\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1) { // Touched nodes\n    let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset\n    if (fromLocal < 0 || fromLocal >= node.content.size) {\n      mustRebuild = true\n      continue\n    }\n    // Must read oldChildren because children was tagged with -1\n    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset\n    let {index, offset: childOffset} = node.content.findIndex(fromLocal)\n    let childNode = node.maybeChild(index)\n    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n      let mapped = children[i + 2].mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options)\n      if (mapped != empty) {\n        children[i] = fromLocal\n        children[i + 1] = toLocal\n        children[i + 2] = mapped\n      } else {\n        children[i + 1] = -2\n        mustRebuild = true\n      }\n    } else {\n      mustRebuild = true\n    }\n  }\n\n  // Remaining children must be collected and rebuilt into the appropriate structure\n  if (mustRebuild) {\n    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping,\n                                                       offset, oldOffset, options)\n    let built = buildTree(decorations, node, 0, options)\n    newLocal = built.local\n    for (let i = 0; i < children.length; i += 3) if (children[i + 1] < 0) {\n      children.splice(i, 3)\n      i -= 3\n    }\n    for (let i = 0, j = 0; i < built.children.length; i += 3) {\n      let from = built.children[i]\n      while (j < children.length && children[j] < from) j += 3\n      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2])\n    }\n  }\n\n  return new DecorationSet(newLocal && newLocal.sort(byPos), children)\n}\n\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) return spans\n  let result = []\n  for (let i = 0; i < spans.length; i++) {\n    let span = spans[i]\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type))\n  }\n  return result\n}\n\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (let i = 0; i < set.local.length; i++) {\n      let mapped = set.local[i].map(mapping, offset, oldOffset)\n      if (mapped) decorations.push(mapped)\n      else if (options.onRemove) options.onRemove(set.local[i].spec)\n    }\n    for (let i = 0; i < set.children.length; i += 3)\n      gather(set.children[i + 2], set.children[i] + oldOffset + 1)\n  }\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1)\n    gather(children[i + 2], oldChildren[i] + oldOffset + 1)\n\n  return decorations\n}\n\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) return null\n  let end = offset + node.nodeSize, found = null\n  for (let i = 0, span; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      ;(found || (found = [])).push(span)\n      spans[i] = null\n    }\n  }\n  return found\n}\n\nfunction withoutNulls(array) {\n  let result = []\n  for (let i = 0; i < array.length; i++)\n    if (array[i] != null) result.push(array[i])\n  return result\n}\n\n// : ([Decoration], Node, number) → DecorationSet\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtractet from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\nfunction buildTree(spans, node, offset, options) {\n  let children = [], hasNulls = false\n  node.forEach((childNode, localStart) => {\n    let found = takeSpansForNode(spans, childNode, localStart + offset)\n    if (found) {\n      hasNulls = true\n      let subtree = buildTree(found, childNode, offset + localStart + 1, options)\n      if (subtree != empty)\n        children.push(localStart, localStart + childNode.nodeSize, subtree)\n    }\n  })\n  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos)\n  for (let i = 0; i < locals.length; i++) if (!locals[i].type.valid(node, locals[i])) {\n    if (options.onRemove) options.onRemove(locals[i].spec)\n    locals.splice(i--, 1)\n  }\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty\n}\n\n// : (Decoration, Decoration) → number\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to\n}\n\n// : ([Decoration]) → [Decoration]\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\nfunction removeOverlap(spans) {\n  let working = spans\n  for (let i = 0; i < working.length - 1; i++) {\n    let span = working[i]\n    if (span.from != span.to) for (let j = i + 1; j < working.length; j++) {\n      let next = working[j]\n      if (next.from == span.from) {\n        if (next.to != span.to) {\n          if (working == spans) working = spans.slice()\n          // Followed by a partially overlapping larger span. Split that\n          // span.\n          working[j] = next.copy(next.from, span.to)\n          insertAhead(working, j + 1, next.copy(span.to, next.to))\n        }\n        continue\n      } else {\n        if (next.from < span.to) {\n          if (working == spans) working = spans.slice()\n          // The end of this one overlaps with a subsequent span. Split\n          // this one.\n          working[i] = span.copy(span.from, next.from)\n          insertAhead(working, j, span.copy(next.from, span.to))\n        }\n        break\n      }\n    }\n  }\n  return working\n}\n\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) i++\n  array.splice(i, 0, deco)\n}\n\n// : (EditorView) → union<DecorationSet, DecorationGroup>\n// Get the decorations associated with the current props of a view.\nexport function viewDecorations(view) {\n  let found = []\n  view.someProp(\"decorations\", f => {\n    let result = f(view.state)\n    if (result && result != empty) found.push(result)\n  })\n  if (view.cursorWrapper)\n    found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]))\n  return DecorationGroup.from(found)\n}\n","// import prosemirror modules\r\nimport { Schema, DOMParser } from \"prosemirror-model\";\r\nimport { EditorState } from \"prosemirror-state\";\r\nimport { EditorView } from \"prosemirror-view\";\r\n\r\nimport 'prosemirror-view/style/prosemirror.css';\r\n\r\n// create a schema -> new Schema({nodes: doc:})\r\nconst mySchema = new Schema({\r\n    nodes: {\r\n        doc: {content: 'block+'},\r\n        paragraph: {\r\n            content: 'text*',\r\n            toDOM(nodes) { return ['p',0] }\r\n        },\r\n        text: {}\r\n    }\r\n});\r\n// create editor state (DOMParser.fromSchema)\r\nlet rootContent = document.querySelector('#root');\r\nlet state = new EditorState.create({mySchema});\r\n// add plugins as needed - undo, redo\r\n// create view component -> new EditorView('doc.querySelect',\r\n// {state})\r\nlet view = new EditorView(rootContent, state);\r\n// import/add style file for editor"]}